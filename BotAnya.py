import json
import os
from datetime import datetime
import asyncio
from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ForceReply
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes, CommandHandler, CallbackQueryHandler
from telegram.helpers import escape_markdown
import requests
import re
import tiktoken

DEBUG_MODE = True  # –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É, –µ—Å–ª–∏ True

user_roles = {}  # user_id: –ø–µ—Ä—Å–æ–Ω–∞–∂
# user_history = {}  # user_id: [—Å–æ–æ–±—â–µ–Ω–∏—è]
user_history = {}  # user_id: {"history": [...], "last_input": "...", "last_bot_id": int}

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
CONFIG_FILE = os.path.join(BASE_DIR, "config.json")
SCENARIOS_DIR = os.path.join(BASE_DIR, "scenarios")
ROLES_FILE = os.path.join(BASE_DIR, "user_roles.json")
HISTORY_FILE = os.path.join(BASE_DIR, "history.json")
LOG_DIR = os.path.join(BASE_DIR, "chat_logs")


def load_config():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            if data.get("debug_mode", True):
                print("üõ†Ô∏è [DEBUG] –ó–∞–≥—Ä—É–∂–µ–Ω config.json:")
                print(json.dumps(data, indent=2, ensure_ascii=False))
            return data
    raise FileNotFoundError("–§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")


config = load_config()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config
BOT_TOKEN = config.get("Telegram_bot_token", "")
if not BOT_TOKEN:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ config.json!")
OLLAMA_URL = config.get("ollama_url", "http://localhost:11434/api/generate")
MODEL = config.get("model", "saiga_nemo_12b.Q8_0:latest")
MAX_TOKENS = config.get("max_tokens", 7000)
DEBUG_MODE = config.get("debug_mode", True)
SCENARIO_FILE = os.path.join(SCENARIOS_DIR, config.get("scenario_file", "fantasy.json"))
ENCODING_NAME = config.get("tiktoken_encoding", "gpt2")
try:
    enc = tiktoken.get_encoding(ENCODING_NAME)
except Exception:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–Ω–∫–æ–¥–µ—Ä '{ENCODING_NAME}', –∏—Å–ø–æ–ª—å–∑—É—é 'gpt2' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    enc = tiktoken.get_encoding("gpt2")


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
def load_characters(scenario_path: str):
    if os.path.exists(scenario_path):
        with open(scenario_path, "r", encoding="utf-8") as f:
            data = json.load(f)

            world = data.get("world", {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∏—Ä", "description": ""})
            characters = data.get("characters", {})

            if DEBUG_MODE:
                print(f"üåç –ú–∏—Ä: {world['name']} ‚Äî {world['description']}")
                print("üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏:")
                for key, char in characters.items():
                    print(f"  üß¨ [{key}] {char['name']} {char.get('emoji', '')} ‚Äî {char['description']}")

            return characters, world

    raise FileNotFoundError(f"–§–∞–π–ª {scenario_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")



characters, world = load_characters(SCENARIO_FILE)
global world_info
world_info = world







# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def load_roles():
    if os.path.exists(ROLES_FILE):
        with open(ROLES_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}



# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_roles():
    with open(ROLES_FILE, "w", encoding="utf-8") as f:
        json.dump(user_roles, f, ensure_ascii=False, indent=2)



# –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def load_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª
def save_history():
    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(user_history, f, ensure_ascii=False, indent=2)



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª
def append_to_archive_user(
    user_id: str,
    role_name: str,
    speaker: str,
    text: str,
    username: str = "",
    full_name: str = "",
    scenario_file: str = "",
    world_name: str = ""
):

    if not os.path.exists(LOG_DIR):
        os.makedirs(LOG_DIR)

    date_str = datetime.now().strftime("%Y-%m-%d")
    file_path = os.path.join(LOG_DIR, f"{user_id}_{date_str}.jsonl")

    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "user_id": user_id,
        "username": username,
        "full_name": full_name,
        "character": role_name,
        "speaker": speaker,
        "text": text,
        "scenario": scenario_file,
        "world": world_name
    }


    with open(file_path, "a", encoding="utf-8") as f:
        f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Markdown
def markdown_to_html(text):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç —Å Markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π:
      - **—Ç–µ–∫—Å—Ç** ‚Üí <b>—Ç–µ–∫—Å—Ç</b> (–∂–∏—Ä–Ω—ã–π)
      - *—Ç–µ–∫—Å—Ç* ‚Üí <i>—Ç–µ–∫—Å—Ç</i> (–∫—É—Ä—Å–∏–≤)
    """
    # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ (–∂–∏—Ä–Ω—ã–π), –∏—Å–ø–æ–ª—å–∑—É—è –Ω–µ –∂–∞–¥–Ω—ã–π –∫–≤–∞–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
    # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ (–∫—É—Ä—Å–∏–≤)
    text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
    return text


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown-—Ä–∞–∑–º–µ—Ç–∫–∏
def safe_markdown_v2(text: str) -> str:
    # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º **–∂–∏—Ä–Ω—ã–π** –∏ *–∫—É—Ä—Å–∏–≤* –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏
    text = re.sub(r'\*\*(.+?)\*\*', r'%%BOLD%%\1%%BOLD%%', text)
    text = re.sub(r'\*(.+?)\*', r'%%ITALIC%%\1%%ITALIC%%', text)

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é
    escaped_text = escape_markdown(text, version=2)

    # –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∂–∏—Ä–Ω—ã–π –∏ –∫—É—Ä—Å–∏–≤ (—É–∂–µ –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
    escaped_text = escaped_text.replace('%%BOLD%%', '*')
    escaped_text = escaped_text.replace('%%ITALIC%%', '_')

    return escaped_text



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    role_entry = user_roles.get(user_id)

    if not role_entry or not isinstance(role_entry, dict):
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç–∏–∫! üêæ –Ø ‚Äî —Ä–æ–ª–µ–≤–æ–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –æ—Ç –∏–º–µ–Ω–∏ —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏, —Å –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å –æ–±—â–∞—Ç—å—Å—è: /role\n"
            "–ê –ø–æ—Ç–æ–º –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ ‚Äî –∏ –Ω–∞—á–Ω—ë–º –º–∞–≥–∏—á–µ—Å–∫–æ–µ –æ–±—â–µ–Ω–∏–µ! ‚ú®"
        )
        return

    role_key = role_entry.get("role")
    scenario_file = role_entry.get("scenario")

    if not role_key or not scenario_file:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç–∏–∫! üêæ –¢—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é.\n"
            "–ù–∞–ø–∏—à–∏ /role, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å, –∏ /scenario ‚Äî –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å –º–∏—Ä üåç"
        )
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω—É–∂–Ω—ã–π –º–∏—Ä
    scenario_path = os.path.join(SCENARIOS_DIR, scenario_file)
    try:
        characters, world = load_characters(scenario_path)
    except Exception as e:
        await update.message.reply_text(
            f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π *{scenario_file}*: {e}",
            parse_mode="Markdown"
        )
        return

    char = characters.get(role_key)
    if not char:
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç–∏–∫! üå∏ –¢—ã –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ *{role_key}*, –Ω–æ –µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ *{world.get('name', scenario_file)}*.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–≥–æ —á–µ—Ä–µ–∑ /role üêæ",
            parse_mode="Markdown"
        )
        return

    # üíï –í—Å—ë —Ö–æ—Ä–æ—à–æ ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ!
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: *{char['name']}* {char.get('emoji', '')}\n\n"
        f"–ú–æ–∂–µ—à—å —Å—Ä–∞–∑—É –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî –∏ —è –æ—Ç–≤–µ—á—É —Ç–µ–±–µ –∫–∞–∫ {char['name']}.\n"
        f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å ‚Äî –Ω–∞–ø–∏—à–∏ /role üòä",
        parse_mode="Markdown"
    )




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    role_lines = []
    for key, char in characters.items():
        line = f"‚Ä¢ *{char['name']}* ‚Äî {char['description']} {char['emoji']}"
        role_lines.append(line)

    roles_text = "\n".join(role_lines)

    await update.message.reply_text(
        "üÜò *–ü–æ–º–æ—â—å*\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ /whoami ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å, –∫—Ç–æ —Ç—ã –≤ —ç—Ç–æ–º –º–∏—Ä–µ\n"
        "‚Ä¢ /reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ —Ä–æ–ª—å\n"
        "‚Ä¢ /retry ‚Äî –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ /edit ‚Äî –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ /scenario ‚Äî –≤—ã–±—Ä–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏\n"
        "‚Ä¢ /role ‚Äî –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Ä–æ–ª–µ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è\n\n"
        "üìå –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ —Ä–æ–ª—å, –∞ –∑–∞—Ç–µ–º –ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≤ –µ—ë —Å—Ç–∏–ª–µ!\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:*\n"
        f"{roles_text}",
        parse_mode="Markdown"
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /role
async def set_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(characters[key]["name"], callback_data=key)]
        for key in characters
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /reset
async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ —Ä–æ–ª—å
    if user_id in user_roles:
        del user_roles[user_id]
    if user_id in user_history:
        del user_history[user_id]

    save_roles()
    save_history()

    await update.message.reply_text("üîÅ –í—Å—ë —Å–±—Ä–æ—à–µ–Ω–æ! –ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /role.")




async def whoami_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    role_entry = user_roles.get(user_id)

    if not role_entry or not isinstance(role_entry, dict):
        await update.message.reply_text("üòø –¢—ã –ø–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n–ù–∞–ø–∏—à–∏ /scenario, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –º–∏—Ä, –∞ –ø–æ—Ç–æ–º /role –¥–ª—è —Ä–æ–ª–∏.")
        return

    scenario_file = role_entry.get("scenario")
    role_key = role_entry.get("role")

    if not scenario_file or not role_key:
        await update.message.reply_text("‚ö†Ô∏è –£ —Ç–µ–±—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å –∏–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π.\n–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /scenario –∏ /role.")
        return

    scenario_path = os.path.join(SCENARIOS_DIR, scenario_file)

    try:
        characters, world = load_characters(scenario_path)
    except Exception as e:
        await update.message.reply_text(f"‚ùó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è '{scenario_file}': {e}")
        return

    char = characters.get(role_key)
    if not char:
        await update.message.reply_text("‚ö†Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /role.")
        return

    user_role_desc = world.get("user_role", "")

    text = (
        f"üë§ *–¢–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫:* {char['name']} {char.get('emoji', '')}\n"
        f"üß¨ _{char['description']}_\n\n"
        f"üåç *–ú–∏—Ä:* {world.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} {world.get('emoji', '')}\n"
        f"üìù _{world.get('description', '')}_\n"
    )

    if user_role_desc:
        user_emoji = world.get("user_emoji", "üë§")
        text += f"\nüé≠ *–¢—ã –≤ —ç—Ç–æ–º –º–∏—Ä–µ:* {user_emoji} _{user_role_desc}_"

    text += f"\n\nüìÇ *–°—Ü–µ–Ω–∞—Ä–∏–π:* `{scenario_file}`"

    await update.message.reply_text(text, parse_mode="Markdown")




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /retry
async def retry_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data = user_history.get(user_id)

    if not user_data or "last_input" not in user_data:
        await update.message.reply_text("‚ùó –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞.")
        return

    history_list = user_data.get("history", [])
    if len(history_list) < 2:
        await update.message.reply_text("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª—å –∏ —Å—Ü–µ–Ω–∞—Ä–∏–π
    role_entry = user_roles.get(user_id)
    if not role_entry:
        await update.message.reply_text("‚ùó –£ —Ç–µ–±—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å. –ù–∞–ø–∏—à–∏ /role.")
        return

    role_key = role_entry["role"]
    scenario_file = role_entry["scenario"]
    scenario_path = os.path.join(SCENARIOS_DIR, scenario_file)

    try:
        characters, world = load_characters(scenario_path)
    except Exception as e:
        await update.message.reply_text(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π: {e}")
        return

    char = characters.get(role_key)
    if not char:
        await update.message.reply_text("‚ùó –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏.")
        return

    char_name = char["name"]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
    last_msg = history_list[-2]
    last_reply = history_list[-1]

    user_prefix = f"{world.get('user_emoji', 'üë§')}:"
    assistant_prefix = f"{char_name}:"

    if last_msg.startswith(user_prefix) and last_reply.startswith(assistant_prefix):
        user_data["history"] = history_list[:-2]
        save_history()
        if DEBUG_MODE:
            print(f"üîÅ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±—Ä–µ–∑–∞–Ω–∞ –Ω–∞ 2 —Å–æ–æ–±—â–µ–Ω–∏—è (retry)")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å: –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —à–∞–±–ª–æ–Ω—É.")
        return

    await update.message.reply_text("üîÅ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç...")
    await handle_message(update, context, override_input=user_data["last_input"])





# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /edit
async def edit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data = user_history.get(user_id)

    if not user_data or "last_input" not in user_data:
        await update.message.reply_text("‚ùó –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    history_list = user_data.get("history", [])
    if len(history_list) < 2:
        await update.message.reply_text("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª—å –∏ –º–∏—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    role_entry = user_roles.get(user_id)
    if not role_entry:
        await update.message.reply_text("‚ùó –£ —Ç–µ–±—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å. –ù–∞–ø–∏—à–∏ /role.")
        return

    role_key = role_entry["role"]
    scenario_file = role_entry["scenario"]
    scenario_path = os.path.join(SCENARIOS_DIR, scenario_file)

    try:
        characters, world = load_characters(scenario_path)
    except Exception as e:
        await update.message.reply_text(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π: {e}")
        return

    char = characters.get(role_key)
    if not char:
        await update.message.reply_text("‚ùó –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏.")
        return

    char_name = char["name"]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
    last_msg = history_list[-2]
    last_reply = history_list[-1]

    user_prefix = f"{world.get('user_emoji', 'üë§')}:"
    assistant_prefix = f"{char_name}:"

    if last_msg.startswith(user_prefix) and last_reply.startswith(assistant_prefix):
        user_data["history"] = history_list[:-2]
        save_history()
        if DEBUG_MODE:
            print(f"‚úÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±—Ä–µ–∑–∞–Ω–∞ –Ω–∞ 2 —Å–æ–æ–±—â–µ–Ω–∏—è (edit)")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.")
        return

    await update.message.reply_text(
        f"üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Å–≤–æ—ë –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{user_data['last_input']}",
        reply_markup=ForceReply(selective=True)
    )



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
async def role_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query: CallbackQuery = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    role_key = query.data

    if role_key in characters:
        user_roles[str(user_id)] = {
            "role": role_key,
            "scenario": os.path.basename(config["scenario_file"])  # –∏–ª–∏ selected_file, –µ—Å–ª–∏ –µ—Å—Ç—å
}
        save_roles()
        await query.edit_message_text(f"–¢–µ–ø–µ—Ä—å —Ç—ã –æ–±—â–∞–µ—à—å—Å—è —Å {characters[role_key]['name']} {characters[role_key]['emoji']}.\n\n"
                                      "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî –∏ —è –æ—Ç–≤–µ—á—É —Ç–µ–±–µ –≤ –µ—ë —Å—Ç–∏–ª–µ!")
    else:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏.")




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
async def handle_force_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message and "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Å–≤–æ—ë –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" in update.message.reply_to_message.text:
        # –ø–æ–¥–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–æ–≤—ã–π –∏ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        update.message.text = update.message.text
        await handle_message(update, context)





# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /scenarios
async def scenario_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    files = [f for f in os.listdir(SCENARIOS_DIR) if f.endswith(".json")]
    buttons = []

    for f in sorted(files):
        path = os.path.join(SCENARIOS_DIR, f)
        try:
            with open(path, "r", encoding="utf-8") as file:
                data = json.load(file)
                world = data.get("world", {})
                world_name = world.get("name", f)
                emoji = world.get("emoji", "üåç")
                buttons.append([InlineKeyboardButton(f"{emoji} {world_name}", callback_data=f"scenario:{f}")])
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {f}: {e}")

    if not buttons:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ –ø–∞–ø–∫–µ /scenarios.")
        return

    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("üåê –í—ã–±–µ—Ä–∏ –º–∏—Ä:", reply_markup=reply_markup)




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
async def scenario_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query: CallbackQuery = update.callback_query
    await query.answer()

    selected_file = query.data.split(":", 1)[1].strip()
    
    scenario_path = os.path.join(SCENARIOS_DIR, selected_file)

    try:
        global characters, config, world_info, user_history

        characters, world = load_characters(scenario_path)
        world_info = world  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ prompt

        # üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        user_id_str = str(query.from_user.id)

        user_history[user_id_str] = {
            "history": [],
            "last_input": "",
            "last_bot_message_id": None
        }

        if DEBUG_MODE:
            print(f"üßπ –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str} –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è.")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ config.json
        config["scenario_file"] = scenario_path
        with open(CONFIG_FILE, "w", encoding="utf-8") as f:
            json.dump(config, f, ensure_ascii=False, indent=2)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π
        role_lines = [
            f"‚Ä¢ *{char['name']}* ‚Äî {char['description']} {char['emoji']}"
            for key, char in characters.items()
        ]
        roles_text = "\n".join(role_lines)

        user_role = world.get("user_role", "")
        user_emoji = world.get("user_emoji", "üë§")
        user_role_line = f"\nüé≠ *–¢—ã –≤ —ç—Ç–æ–º –º–∏—Ä–µ:* {user_emoji} _{user_role}_" if user_role else ""

        await query.edit_message_text(
            f"üéÆ –°—Ü–µ–Ω–∞—Ä–∏–π *{world.get('name', selected_file)}* –∑–∞–≥—Ä—É–∂–µ–Ω! {world.get('emoji', '')}\n"
            f"üìù _{world.get('description', '')}_\n"
            f"{user_role_line}\n\n"
            f"*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:*\n{roles_text}\n\n"
            f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–∏—Ä–∞: /role",
            parse_mode="Markdown"
        )

        # ‚ùå –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id_str = str(query.from_user.id)
        if user_id_str in user_roles:
            user_roles[user_id_str]["role"] = None
            save_roles()  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!

    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")






# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE, override_input=None):
    user_input = override_input or update.message.text

    user_obj = update.effective_user
    user_id = str(user_obj.id)
    username = user_obj.username or ""
    full_name = user_obj.full_name or ""

    # –ø–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–≤—É—é –∏–∑ characters –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    role_entry = user_roles.get(user_id)

    if not role_entry or not isinstance(role_entry, dict):
        await update.message.reply_text("üòø –¢—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞–ø–∏—à–∏ /role.")
        return

    role_key = role_entry.get("role")
    scenario_file = role_entry.get("scenario")

    if not role_key or not scenario_file:
        await update.message.reply_text("üòø –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–≤–æ—ë–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –∏–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏. –ù–∞–ø–∏—à–∏ /role.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∏—Ä
    scenario_path = os.path.join(SCENARIOS_DIR, scenario_file)
    try:
        characters, world = load_characters(scenario_path)
    except Exception as e:
        await update.message.reply_text(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π: {e}")
        return

    char = characters.get(role_key)
    if not char:
        await update.message.reply_text(
            f"‚ö†Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ *{role_key}* –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ *{world.get('name', scenario_file)}*.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∑–∞–Ω–æ–≤–æ: /role",
            parse_mode="Markdown"
        )
        return


    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    scenario_path = os.path.join(SCENARIOS_DIR, scenario_file)
    try:
        characters, world = load_characters(scenario_path)
    except Exception as e:
        await update.message.reply_text(f"‚ùó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è '{scenario_file}': {e}")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏—Ä –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è base_prompt
    global world_info
    world_info = world

    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–ª–∏ –ø–µ—Ä–≤—É—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_role = next(iter(characters))
    role_key = role_key or default_role
    char = characters.get(role_key)

    if not char:
        await update.message.reply_text("‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ: /role")
        return

    # –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞—Ä—Ö–∏–≤
    append_to_archive_user(
        user_id,
        role_key,
        "user",
        user_input,
        username,
        full_name,
        scenario_file=scenario_file,
        world_name=world.get("name", "")
    )

    # ========== –¢–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è ==========
    user_role_description = world_info.get("user_role", "")
    world_prompt = world_info.get("system_prompt", "")
    base_prompt = f"{world_prompt}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî {user_role_description}.\n{char['prompt']}\n"

    tokens_used = len(enc.encode(base_prompt))

    # history = user_history.get(user_id, [])
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user_data = user_history.get(user_id)

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if user_data is None:
        user_data = {
            "history": [],
            "last_input": "",
            "last_bot_id": None
        }

    history = user_data.get("history", [])


    trimmed_history = []

     # –æ–±—Ä–µ–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω–∞–º
    for message in reversed(history):
        message_tokens = len(enc.encode(message + "\n"))
        if tokens_used + message_tokens < MAX_TOKENS:
            trimmed_history.insert(0, message)
            tokens_used += message_tokens
        else:
            break

    
    user_emoji = world_info.get("user_emoji", "üßë")
    user_message = f"{user_emoji}: {user_input}"
    
    user_message_tokens = len(enc.encode(user_message + "\n"))
    total_prompt_tokens = tokens_used + user_message_tokens

    if tokens_used + user_message_tokens < MAX_TOKENS:
        trimmed_history.append(user_message)
    else:
        trimmed_history = [user_message]

    #user_history[user_id] = trimmed_history
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_data["history"] = trimmed_history
    user_data["last_input"] = user_input  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–≤–æ–¥
    user_history[user_id] = user_data

    save_history()

    history_text = "\n".join(trimmed_history)
    prompt = f"{base_prompt}{history_text}\n{char['name']}:"

    payload = {
        "model": MODEL,
        "prompt": prompt,
        "stream": False
    }

    # ====== DEBUG ======
    if DEBUG_MODE:
        print("\n" + "="*60)
        print("üü¢ PROMPT, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤ –º–æ–¥–µ–ª—å (—Ç–µ–∫—Å—Ç):\n")
        print(prompt)
        print("="*60)
        print("üì¶ PAYLOAD:")
        print(json.dumps(payload, indent=2, ensure_ascii=False))
        print("="*60)

    try:
        thinking_message = await update.message.reply_text(f"{char['name']} –¥—É–º–∞–µ—Ç... ü§î")
        response = requests.post(OLLAMA_URL, json=payload, timeout=30)
        data = response.json()
        reply = data["response"]

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –ª–æ–≥
        trimmed_history.append(f"{char['name']}: {reply}")
        save_history()

        append_to_archive_user(
            user_id,
            role_key,
            "assistant",
            reply,
            username,
            full_name,
            scenario_file=scenario_file,
            world_name=world.get("name", "")
        )

        if DEBUG_MODE:
            print("üì§ –û—Ç–≤–µ—Ç:")
            print(reply)
            print("="*60)
            print(f"üìä [Debug] –¢–æ–∫–µ–Ω–æ–≤ –≤ prompt: {total_prompt_tokens} / {MAX_TOKENS}")


    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏: {e}"
    
    await thinking_message.delete()

    # await update.message.reply_text(reply)

    # html_reply = markdown_to_html(reply)
    # await update.message.reply_text(html_reply, parse_mode="HTML")

    formatted_reply = safe_markdown_v2(reply)
    # await update.message.reply_text(formatted_reply, parse_mode="MarkdownV2")
    bot_msg = await update.message.reply_text(formatted_reply, parse_mode="MarkdownV2")
    user_data["last_bot_id"] = bot_msg.message_id

    

# üëâ –í—Å—ë –æ—Å–Ω–æ–≤–Ω–æ–µ –≤–Ω—É—Ç—Ä–∏ async main()
async def main():
    
    global user_roles
    user_roles = load_roles()

    global user_history
    user_history = load_history()
    
    
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("role", set_role))
    app.add_handler(CommandHandler("reset", reset_command))
    app.add_handler(CommandHandler("retry", retry_command))
    app.add_handler(CommandHandler("edit", edit_command))
    app.add_handler(CommandHandler("scenario", scenario_command))
    app.add_handler(CommandHandler("whoami", whoami_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.REPLY & filters.TEXT, handle_force_reply))
    app.add_handler(CallbackQueryHandler(scenario_button, pattern="^scenario:"))
    app.add_handler(CallbackQueryHandler(role_button,)) # pattern="^[a-z–∞-—è—ë_]+$"))
    

    await app.bot.set_my_commands([
        BotCommand("scenario", "–í—ã–±—Ä–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π"),
        BotCommand("role", "–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"),
        BotCommand("whoami", "–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ç–æ —è"),
        BotCommand("start", "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥"),
        BotCommand("help", "–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand("retry", "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        BotCommand("edit", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        BotCommand("reset", "–°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ —Ä–æ–ª—å")
    ])

    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    if DEBUG_MODE:
        print(f"üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å: {MODEL}")
        print(f"üîó URL –º–æ–¥–µ–ª–∏: {OLLAMA_URL}")
        print(f"üßÆ –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤: {MAX_TOKENS}")
        print(f"üî§ –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –¥–ª—è tiktoken: {ENCODING_NAME}")
    await app.run_polling()

# –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())
