import json
import os
from datetime import datetime
import asyncio
from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ForceReply
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes, CommandHandler, CallbackQueryHandler
from telegram.helpers import escape_markdown
import requests
import re
import tiktoken

DEBUG_MODE = True  # –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É, –µ—Å–ª–∏ True

user_roles = {}  # user_id: –ø–µ—Ä—Å–æ–Ω–∞–∂
# user_history = {}  # user_id: [—Å–æ–æ–±—â–µ–Ω–∏—è]
user_history = {}  # user_id: {"history": [...], "last_input": "...", "last_bot_id": int}


BOT_TOKEN = "8171517634:AAEgsU3cQA4kbjqicG2Lp0SKsoq0oeAXiYg"

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
ROLES_FILE = os.path.join(BASE_DIR, "user_roles.json")
HISTORY_FILE = os.path.join(BASE_DIR, "history.json")
LOG_DIR = os.path.join(BASE_DIR, "chat_logs")

OLLAMA_URL = "http://localhost:11434/api/generate"
MODEL = "saiga_nemo_12b.Q8_0:latest"  # –∏–ª–∏ —Ç–≤–æ—è –º–æ–¥–µ–ª—å
# –ü–æ–¥–±–∏—Ä–∞–µ–º —ç–Ω–∫–æ–¥–µ—Ä –¥–ª—è –Ω—É–∂–Ω–æ–π –º–æ–¥–µ–ª–∏
# –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å Saiga, Mistral, LLaMA –∏ —Ç.–ø. ‚Äî —á–∞—â–µ –≤—Å–µ–≥–æ —ç—Ç–æ gpt2
enc = tiktoken.get_encoding("gpt2")
# –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ (–¥–ª—è 8k –º–æ–¥–µ–ª–∏ –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –±—Ä–∞—Ç—å 7000)
MAX_TOKENS = 7000

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö
characters = {
    "—ç–ª—å—Ñ–∏–π–∫–∞": {
        "name": "–ê—Ä–∏—ç–ª—å",
        "emoji": "üßù‚Äç‚ôÄÔ∏è",
        "prompt": "–¢—ã ‚Äî –º—É–¥—Ä–∞—è —ç–ª—å—Ñ–∏–π—Å–∫–∞—è —á–∞—Ä–æ–¥–µ–π–∫–∞ –ê—Ä–∏—ç–ª—å. –ì–æ–≤–æ—Ä–∏—à—å –ø–æ—ç—Ç–∏—á–Ω–æ, —Å –º–∞–≥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ç–æ–Ω–∞—Ü–∏–µ–π.",
        "description": "–º—É–¥—Ä–∞—è —ç–ª—å—Ñ–∏–π–∫–∞"
    },
    "–≤–æ–∏—Ç–µ–ª—å–Ω–∏—Ü–∞": {
        "name": "–†–∞–≥–Ω–∞",
        "emoji": "‚öîÔ∏è",
        "prompt": "–¢—ã ‚Äî —Å—É—Ä–æ–≤–∞—è —Å–µ–≤–µ—Ä–Ω–∞—è –≤–æ–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –†–∞–≥–Ω–∞. –ì–æ–≤–æ—Ä–∏—à—å –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ –¥–µ–ª—É, —É–≤–∞–∂–∞–µ—à—å —Å–∏–ª—É.",
        "description": "—Å—É—Ä–æ–≤–∞—è –≤–æ–∏—Ç–µ–ª—å–Ω–∏—Ü–∞"
    },
    "–Ω—è—à–∞": {
        "name": "–ö–æ—Ç–æ–∫–∞",
        "emoji": "üíª",
        "prompt": "–¢—ã ‚Äî –º–∏–ª–∞—è –Ω—è—à–∞-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∫–∞ –ö–æ—Ç–æ–∫–∞. –ì–æ–≤–æ—Ä–∏—à—å –ª–∞—Å–∫–æ–≤–æ, –æ–±—ä—è—Å–Ω—è–µ—à—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–µ—â–∏ –ø–æ–Ω—è—Ç–Ω–æ, —Å –º—É—Ä—á–∞–Ω–∏–µ–º.",
        "description": "–Ω—è—à–∞-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∫–∞"
    }
}



# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def load_roles():
    if os.path.exists(ROLES_FILE):
        with open(ROLES_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}



# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_roles():
    with open(ROLES_FILE, "w", encoding="utf-8") as f:
        json.dump(user_roles, f, ensure_ascii=False, indent=2)



# –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def load_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª
def save_history():
    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(user_history, f, ensure_ascii=False, indent=2)



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª
def append_to_archive_user(user_id: str, role_name: str, speaker: str, text: str, username: str = "", full_name: str = ""):

    if not os.path.exists(LOG_DIR):
        os.makedirs(LOG_DIR)

    date_str = datetime.now().strftime("%Y-%m-%d")
    file_path = os.path.join(LOG_DIR, f"{user_id}_{date_str}.jsonl")

    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "user_id": user_id,
        "username": username,
        "full_name": full_name,
        "character": role_name,
        "speaker": speaker,
        "text": text
    }


    with open(file_path, "a", encoding="utf-8") as f:
        f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Markdown
def markdown_to_html(text):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç —Å Markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π:
      - **—Ç–µ–∫—Å—Ç** ‚Üí <b>—Ç–µ–∫—Å—Ç</b> (–∂–∏—Ä–Ω—ã–π)
      - *—Ç–µ–∫—Å—Ç* ‚Üí <i>—Ç–µ–∫—Å—Ç</i> (–∫—É—Ä—Å–∏–≤)
    """
    # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ (–∂–∏—Ä–Ω—ã–π), –∏—Å–ø–æ–ª—å–∑—É—è –Ω–µ –∂–∞–¥–Ω—ã–π –∫–≤–∞–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
    # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ (–∫—É—Ä—Å–∏–≤)
    text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
    return text


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown-—Ä–∞–∑–º–µ—Ç–∫–∏
def safe_markdown_v2(text: str) -> str:
    # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º **–∂–∏—Ä–Ω—ã–π** –∏ *–∫—É—Ä—Å–∏–≤* –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏
    text = re.sub(r'\*\*(.+?)\*\*', r'%%BOLD%%\1%%BOLD%%', text)
    text = re.sub(r'\*(.+?)\*', r'%%ITALIC%%\1%%ITALIC%%', text)

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é
    escaped_text = escape_markdown(text, version=2)

    # –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∂–∏—Ä–Ω—ã–π –∏ –∫—É—Ä—Å–∏–≤ (—É–∂–µ –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
    escaped_text = escaped_text.replace('%%BOLD%%', '*')
    escaped_text = escaped_text.replace('%%ITALIC%%', '_')

    return escaped_text



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    role_key = user_roles.get(user_id)

    if role_key:
        char = characters[role_key]
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: *{char['name']}* {char['emoji']}\n\n"
            f"–ú–æ–∂–µ—à—å —Å—Ä–∞–∑—É –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî –∏ —è –æ—Ç–≤–µ—á—É —Ç–µ–±–µ –∫–∞–∫ {char['name']}.\n"
            f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å ‚Äî –Ω–∞–ø–∏—à–∏ /role üòä",
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç–∏–∫! üêæ –Ø ‚Äî —Ä–æ–ª–µ–≤–æ–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –æ—Ç –∏–º–µ–Ω–∏ —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏, —Å –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å –æ–±—â–∞—Ç—å—Å—è: /role\n"
            "–ê –ø–æ—Ç–æ–º –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ ‚Äî –∏ –Ω–∞—á–Ω—ë–º –º–∞–≥–∏—á–µ—Å–∫–æ–µ –æ–±—â–µ–Ω–∏–µ! ‚ú®"
        )



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    role_lines = []
    for key, char in characters.items():
        line = f"‚Ä¢ *{char['name']}* ‚Äî {char['description']} {char['emoji']}"
        role_lines.append(line)

    roles_text = "\n".join(role_lines)

    await update.message.reply_text(
        "üÜò *–ü–æ–º–æ—â—å*\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ /reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ —Ä–æ–ª—å\n"
        "‚Ä¢ /retry ‚Äî –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ /edit ‚Äî –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ /role ‚Äî –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Ä–æ–ª–µ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è\n\n"
        "üìå –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ —Ä–æ–ª—å, –∞ –∑–∞—Ç–µ–º –ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≤ –µ—ë —Å—Ç–∏–ª–µ!\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:*\n"
        f"{roles_text}",
        parse_mode="Markdown"
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /role
async def set_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(characters[key]["name"], callback_data=key)]
        for key in characters
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /reset
async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ —Ä–æ–ª—å
    if user_id in user_roles:
        del user_roles[user_id]
    if user_id in user_history:
        del user_history[user_id]

    save_roles()
    save_history()

    await update.message.reply_text("üîÅ –í—Å—ë —Å–±—Ä–æ—à–µ–Ω–æ! –ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /role.")


async def retry_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data = user_history.get(user_id)

    if not user_data or "last_input" not in user_data:
        await update.message.reply_text("‚ùó –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞.")
        return

    history = user_data.get("history", [])

    # –£–¥–∞–ª–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    if len(history) >= 2:
        last_msg = history[-2]
        last_reply = history[-1]
        char_name = characters[user_roles.get(user_id, next(iter(characters)))]['name']

        if last_msg.startswith("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:") and last_reply.startswith(f"{char_name}:"):
            history = history[:-2]  # —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞
            user_data["history"] = history
            user_history[user_id] = user_data
            save_history()

    await update.message.reply_text("üîÅ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç...")
    await handle_message(update, context, override_input=user_data["last_input"])



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /edit
async def edit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data = user_history.get(user_id)

    if not user_data or "last_input" not in user_data:
        await update.message.reply_text("‚ùó –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    history = user_data.get("history", [])

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    if len(history) >= 2:
        last_msg = history[-2]
        last_reply = history[-1]
        char_name = characters[user_roles.get(user_id, next(iter(characters)))]['name']

        if last_msg.startswith("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:") and last_reply.startswith(f"{char_name}:"):
            history = history[:-2]  # —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            user_data["history"] = history
            user_history[user_id] = user_data
            save_history()

    await update.message.reply_text(
        f"üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Å–≤–æ—ë –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{user_data['last_input']}",
        reply_markup=ForceReply(selective=True)
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
async def role_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query: CallbackQuery = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    role_key = query.data

    if role_key in characters:
        user_roles[str(user_id)] = role_key
        save_roles()
        await query.edit_message_text(f"–¢–µ–ø–µ—Ä—å —Ç—ã –æ–±—â–∞–µ—à—å—Å—è —Å {characters[role_key]['name']} {characters[role_key]['emoji']}.\n\n"
                                      "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî –∏ —è –æ—Ç–≤–µ—á—É —Ç–µ–±–µ –≤ –µ—ë —Å—Ç–∏–ª–µ!")
    else:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏.")




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
async def handle_force_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message and "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Å–≤–æ—ë –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" in update.message.reply_to_message.text:
        # –ø–æ–¥–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–æ–≤—ã–π –∏ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        update.message.text = update.message.text
        await handle_message(update, context)




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE, override_input=None):
    user_input = override_input or update.message.text

    user_obj = update.effective_user
    user_id = str(user_obj.id)
    username = user_obj.username or ""
    full_name = user_obj.full_name or ""

    # –ø–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–≤—É—é –∏–∑ characters –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_role = next(iter(characters))
    role = user_roles.get(user_id, default_role)
    char = characters[role]

    # –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞—Ä—Ö–∏–≤
    append_to_archive_user(user_id, role, "user", user_input, username, full_name)

    # ========== –¢–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è ==========
    base_prompt = f"{char['prompt']}\n"
    tokens_used = len(enc.encode(base_prompt))

    # history = user_history.get(user_id, [])
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user_data = user_history.get(user_id)

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if user_data is None:
        user_data = {
            "history": [],
            "last_input": "",
            "last_bot_id": None
        }

    history = user_data.get("history", [])


    trimmed_history = []

     # –æ–±—Ä–µ–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω–∞–º
    for message in reversed(history):
        message_tokens = len(enc.encode(message + "\n"))
        if tokens_used + message_tokens < MAX_TOKENS:
            trimmed_history.insert(0, message)
            tokens_used += message_tokens
        else:
            break

    user_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_input}"
    user_message_tokens = len(enc.encode(user_message + "\n"))
    total_prompt_tokens = tokens_used + user_message_tokens

    if tokens_used + user_message_tokens < MAX_TOKENS:
        trimmed_history.append(user_message)
    else:
        trimmed_history = [user_message]

    #user_history[user_id] = trimmed_history
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_data["history"] = trimmed_history
    user_data["last_input"] = user_input  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–≤–æ–¥
    user_history[user_id] = user_data

    save_history()

    history_text = "\n".join(trimmed_history)
    prompt = f"{char['prompt']}\n{history_text}\n{char['name']}:"

    payload = {
        "model": MODEL,
        "prompt": prompt,
        "stream": False
    }

    # ====== DEBUG ======
    if DEBUG_MODE:
        print("\n" + "="*60)
        print("üü¢ PROMPT, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤ –º–æ–¥–µ–ª—å (—Ç–µ–∫—Å—Ç):\n")
        print(prompt)
        print("="*60)
        print("üì¶ PAYLOAD:")
        print(json.dumps(payload, indent=2, ensure_ascii=False))
        print("="*60)

    try:
        thinking_message = await update.message.reply_text(f"{char['name']} –¥—É–º–∞–µ—Ç... ü§î")
        response = requests.post(OLLAMA_URL, json=payload, timeout=30)
        data = response.json()
        reply = data["response"]

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –ª–æ–≥
        trimmed_history.append(f"{char['name']}: {reply}")
        save_history()

        append_to_archive_user(user_id, role, "assistant", reply, username, full_name)

        if DEBUG_MODE:
            print("üì§ –û—Ç–≤–µ—Ç:")
            print(reply)
            print("="*60)
            print(f"üìä [Debug] –¢–æ–∫–µ–Ω–æ–≤ –≤ prompt: {total_prompt_tokens} / {MAX_TOKENS}")


    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏: {e}"
    
    await thinking_message.delete()

    # await update.message.reply_text(reply)

    # html_reply = markdown_to_html(reply)
    # await update.message.reply_text(html_reply, parse_mode="HTML")

    formatted_reply = safe_markdown_v2(reply)
    # await update.message.reply_text(formatted_reply, parse_mode="MarkdownV2")
    bot_msg = await update.message.reply_text(formatted_reply, parse_mode="MarkdownV2")
    user_data["last_bot_id"] = bot_msg.message_id

    

# üëâ –í—Å—ë –æ—Å–Ω–æ–≤–Ω–æ–µ –≤–Ω—É—Ç—Ä–∏ async main()
async def main():
    
    global user_roles
    user_roles = load_roles()

    global user_history
    user_history = load_history()
    
    
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("role", set_role))
    app.add_handler(CommandHandler("reset", reset_command))
    app.add_handler(CommandHandler("retry", retry_command))
    app.add_handler(CommandHandler("edit", edit_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.REPLY & filters.TEXT, handle_force_reply))
    app.add_handler(CallbackQueryHandler(role_button))

    await app.bot.set_my_commands([
        BotCommand("role", "–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"),
        BotCommand("start", "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥"),
        BotCommand("help", "–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand("retry", "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        BotCommand("edit", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        BotCommand("reset", "–°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ —Ä–æ–ª—å")
    ])

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()

# –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())