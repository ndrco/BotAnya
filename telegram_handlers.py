# telegram_handlers.py
# This file is part of the BotAnya Telegram Bot project.

import json
import os
import asyncio
import tiktoken
from telegram import Update, BotCommand, InlineKeyboardButton,Message,\
                         InlineKeyboardMarkup, CallbackQuery, ForceReply
from telegram.ext import CommandHandler, MessageHandler, CallbackQueryHandler, \
                         ContextTypes, filters
from translate_utils import translate_prompt_to_english, translate_prompt_to_russian
from telegram.constants import ChatAction
from bot_state import bot_state, load_characters, save_roles, save_history
from utils import safe_markdown_v2, smart_trim_history, build_chatml_prompt, \
                        build_plain_prompt, wrap_chatml_prompt, build_scene_prompt
from ollama_client import send_prompt_to_ollama
from gigachat_client import send_prompt_to_gigachat
from config import (SCENARIOS_DIR, MAX_LENGTH)



def register_handlers(app):
    app.add_handler(CommandHandler("service", service_command))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("scenario", scenario_command))
    app.add_handler(CommandHandler("role", set_role)) 
    app.add_handler(CommandHandler("scene", scene_command))
    app.add_handler(CommandHandler("whoami", whoami_command))
    app.add_handler(CommandHandler("retry", retry_command))
    app.add_handler(CommandHandler("edit", edit_command))
    app.add_handler(CommandHandler("continue", continue_command))
    app.add_handler(CommandHandler("history", history_command))
    app.add_handler(CommandHandler("reset", reset_command))
    app.add_handler(CommandHandler("lang", lang_command))
    app.add_handler(CommandHandler("help", help_command))
    
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.REPLY & filters.TEXT, handle_force_reply))
    
    app.add_handler(CallbackQueryHandler(continue_reply_handler, pattern="^continue_reply$"))
    app.add_handler(CallbackQueryHandler(retry_callback_handler, pattern="^cb_retry$"))
    app.add_handler(CallbackQueryHandler(edit_callback_handler, pattern="^cb_edit$"))
    app.add_handler(CallbackQueryHandler(scenario_button, pattern="^scenario:"))
    app.add_handler(CallbackQueryHandler(service_button, pattern=r"^service:"))
    app.add_handler(CallbackQueryHandler(role_button))




# Function to show typing animation
async def show_typing_animation(context, chat_id, stop_event):
    while not stop_event.is_set():
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        await asyncio.sleep(6)  # Telegram –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç..." –Ω–∞ ~5 —Å–µ–∫—É–Ω–¥




def get_bot_commands():
    return [
        BotCommand("start", "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥"),
        BotCommand("scenario", "–í—ã–±—Ä–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π"),
        BotCommand("role", "–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"),
        BotCommand("scene", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—é–∂–µ—Ç–Ω—É—é —Å—Ü–µ–Ω—É"),
        BotCommand("whoami", "–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ç–æ —è"),
        BotCommand("retry", "–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞"),
        BotCommand("continue", "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å coo–±—â–µ–Ω–∏–µ –±–æ—Ç–∞"),
        BotCommand("edit", "–ò–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        BotCommand("history", "–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é"),
        BotCommand("reset", "–°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"),
        BotCommand("service", "–í—ã–±—Ä–∞—Ç—å –¥—É–º–∞—Ç–µ–ª—å"),
        BotCommand("lang", "–Ø–∑—ã–∫ –¥—É–º–∞—Ç–µ–ª—è (EN/RU)"),
        BotCommand("help", "–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
    ]




# Function to send a message with MarkdownV2 formatting
async def safe_send_markdown(update, text: str, original_text: str = None, buttons: list = None) -> Message:
    """
        Safely sends a message with MarkdownV2. If formatting fails, retry without it.

        :param update: Telegram update object
        :param text: text prepared for MarkdownV2
        :param original_text: unformatted original, if Markdown breaks
        :param buttons: list of buttons (list[list[InlineKeyboardButton]]) or None
        :return: Message object
    """
    reply_markup = InlineKeyboardMarkup(buttons) if buttons else None
    effective_message = update.effective_message
    
    if not text.strip():
        text = "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
    
    try:
        return await effective_message.reply_text(
            text, parse_mode="MarkdownV2", reply_markup=reply_markup
        )
    except Exception as e:
        if bot_state.debug_mode:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2: {e}")
            print("üìù –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return await effective_message.reply_text(
            original_text or text, reply_markup=reply_markup
        )




# /service handler
async def service_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    services = bot_state.config.get("services", {})
    user_role = bot_state.get_user_role(user_id) or {}
    active_service = user_role.get("service")

    buttons = [
        [InlineKeyboardButton(f"{'‚úÖ ' if key == active_service else ''}{services[key].get('name', key)}", callback_data=f"service:{key}")]
        for key in services.keys()
    ]

    await update.message.reply_text(
        "üß† –í—ã–±–µ—Ä–∏ –¥—É–º–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )





# /start  handler
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    user_id = str(update.effective_user.id)

    char, _, _, _, error = bot_state.get_user_character_and_world(user_id)
    if error:
        if "–Ω–µ –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞" in error or "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" in error:
            # New user 
            await update.message.reply_text(
                "–ü—Ä–∏–≤–µ—Ç–∏–∫! üêæ –Ø ‚Äî —Ä–æ–ª–µ–≤–æ–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –æ—Ç –∏–º–µ–Ω–∏ —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π: /scenario –∏ —Å –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å –æ–±—â–∞—Ç—å—Å—è: /role\n"
                "–ê –ø–æ—Ç–æ–º –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ ‚Äî –∏ –Ω–∞—á–Ω—ë–º –º–∞–≥–∏—á–µ—Å–∫–æ–µ –æ–±—â–µ–Ω–∏–µ! ‚ú®\n\n"
                "üí° –•–æ—á–µ—à—å —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å —Å –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–π —Å—Ü–µ–Ω—ã?\n"
                "–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /scene ‚Äî –∏ —è –æ–ø–∏—à—É, –∫–∞–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–≤–æ—ë –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ üé¨"
            )
        else:
            # ‚ö†Ô∏è Error loading character 
            await update.message.reply_text(error, parse_mode="Markdown")
        return
        
    # üíï Ok
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –¢–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫: *{char['name']}* {char.get('emoji', '')}\n\n"
        f"–ú–æ–∂–µ—à—å —Å—Ä–∞–∑—É –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî –∏ —è –æ—Ç–≤–µ—á—É —Ç–µ–±–µ –∫–∞–∫ {char['name']}.\n"
        f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å ‚Äî –Ω–∞–ø–∏—à–∏ /role üòä",
        parse_mode="Markdown"
    )




# /scenarios handler
async def scenario_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    files = [f for f in os.listdir(SCENARIOS_DIR) if f.endswith(".json")]
    buttons = []

    for f in sorted(files):
        path = os.path.join(SCENARIOS_DIR, f)
        try:
            with open(path, "r", encoding="utf-8") as file:
                data = json.load(file)
                world = data.get("world", {})
                world_name = world.get("name", f)
                emoji = world.get("emoji", "üåç")
                buttons.append([InlineKeyboardButton(f"{emoji} {world_name}", callback_data=f"scenario:{f}")])
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {f}: {e}")

    if not buttons:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ –ø–∞–ø–∫–µ /scenarios.")
        return

    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("üåê –í—ã–±–µ—Ä–∏ –º–∏—Ä:", reply_markup=reply_markup)




# /role handler
async def set_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    role_entry = bot_state.get_user_role(user_id)

    if not role_entry or "scenario" not in role_entry:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ /scenario.")
        return

    scenario_file = role_entry["scenario"]
    scenario_path = os.path.join(SCENARIOS_DIR, scenario_file)

    try:
        characters, _ = load_characters(scenario_path)
    except Exception as e:
        await update.message.reply_text(f"‚ùó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        return

    keyboard = [
        [
            InlineKeyboardButton(
                f"{char.get('emoji', 'ü§ñ')} {char['name']}",
                callback_data=key
            )
        ]
        for key, char in characters.items()
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üé≠ –í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=reply_markup)








# /scene handler
async def scene_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    # Getting character and world for the user
    char, world, _, scenario_file, error = bot_state.get_user_character_and_world(user_id)
    if error:
        await update.message.reply_text(error, parse_mode="Markdown")
        return

    user_role = world.get("user_role", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")
    world_prompt = world.get("system_prompt", "")

    # Prompt building
    base_prompt = build_scene_prompt(world_prompt, char, user_role)
    service_config = bot_state.get_user_service_config(user_id)
    if service_config.get("chatml", False):
        prompt = wrap_chatml_prompt(base_prompt)
    else:
        prompt = base_prompt

    service_type = service_config.get("type")
    match service_type:
        case "ollama":
            send_func = send_prompt_to_ollama
        case "gigachat":
            send_func = send_prompt_to_gigachat
        case _:
            raise ValueError(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞: {service_type}")

    _, my_position = await send_func(
        user_id,
        prompt,
        bot_state,
        use_translation=bot_state.get_user_role(user_id).get("use_translation", False),
        translate_func = translate_prompt_to_english,
        reverse_translate_func = translate_prompt_to_russian,
        get_position_only = True
    )

    if my_position > 1:
        await update.effective_message.reply_text(
            f"‚è≥ –°–µ–π—á–∞—Å –¥—É–º–∞—Ç–µ–ª—å –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º–∏... –¢—ã ‚Äî *{my_position}-–π* –≤ –æ—á–µ—Ä–µ–¥–∏.",
            parse_mode="Markdown"
        )

    thinking_message = await update.message.reply_text("üé¨ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ü–µ–Ω—É... –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ ‚òï")

    stop_typing = asyncio.Event()
    typing_task = asyncio.create_task(show_typing_animation(context, update.effective_chat.id, stop_typing))

    try:
        # Sending prompt
        reply_scene, _ = await send_func(
            user_id,
            prompt,
            bot_state,
            use_translation=bot_state.get_user_role(user_id).get("use_translation", False),
            translate_func=translate_prompt_to_english,
            reverse_translate_func=translate_prompt_to_russian
        )
    except Exception as e:
        reply_scene = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω—ã: {e}"
    finally:
        stop_typing.set()
        await typing_task       

    await thinking_message.delete()

    # History management
    lock = bot_state.get_user_lock(user_id)
    async with lock:

        user_data = bot_state.get_user_history(user_id, scenario_file)
        narrator_entry = f"Narrator: {reply_scene}"
        user_data["history"].append(narrator_entry)
        
        formatted_scene = safe_markdown_v2(reply_scene)

        buttons = [[
            InlineKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="cb_retry"),
            InlineKeyboardButton("‚è≠ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_reply"),
        ]]
        
        bot_msg = await safe_send_markdown(update, formatted_scene, reply_scene, buttons)

        bot_state.update_user_history(user_id, scenario_file, user_data["history"], last_input="*–û–ø–∏—à–∏ —Å—Ü–µ–Ω—É*", last_bot_id=bot_msg.message_id)
        save_history()





# /whoami handler
async def whoami_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    
    char, world, _, _, error = bot_state.get_user_character_and_world(user_id)
    if error:
        await update.message.reply_text(error, parse_mode="Markdown")
        return

    user_role_desc = world.get("user_role", "")

    service_config = bot_state.get_user_service_config(user_id)
    service_name = service_config.get("name", "")

    role_entry = bot_state.get_user_role(user_id)
    use_translation = role_entry.get("use_translation", False)
    lang = "EN" if use_translation else "RU"

    text = (
        f"üåç *–ú–∏—Ä:* {world.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} {world.get('emoji', '')}\n"
        f"üìù _{world.get('description', '')}_\n"        
        f"üë§ *–¢–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫:* {char['name']} {char.get('emoji', '')}\n"
        f"üß¨ _{char['description']}_\n\n"
    )

    if user_role_desc:
        user_emoji = world.get("user_emoji", "üë§")
        text += f"üé≠ *–¢—ã –≤ —ç—Ç–æ–º –º–∏—Ä–µ:* {user_emoji} _{user_role_desc}_\n\n"

    if service_name:
        text += (
            f"\nüß†*–í–∫–ª—é—á–µ–Ω –¥—É–º–∞—Ç–µ–ª—å:* _{service_name}_"
            f"\nüåç*–Ø–∑—ã–∫ –¥—É–º–∞—Ç–µ–ª—è:* _{lang}_"     
        )

    await update.message.reply_text(text, parse_mode="Markdown")





# /retry handler
async def retry_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    # Getting character and world for the user
    _, _, _, scenario_file, error = bot_state.get_user_character_and_world(user_id)
    if error:
        await update.effective_message.reply_text(error, parse_mode="Markdown")
        return

    call_scene_after = False
    override_input = None

    lock = bot_state.get_user_lock(user_id)
    async with lock:
        user_data = bot_state.get_user_history(user_id, scenario_file)
        history = user_data.get("history", [])

        if not history:
            await update.effective_message.reply_text("‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ ‚Äî –Ω–µ—á–µ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å.")
            return

        last_reply = history[-1]
        
        # If the last reply is from the narrator, we can repeat the last scene
        if last_reply.startswith("Narrator:"):
            history_cut = history[:-1]
            bot_state.update_user_history(user_id, scenario_file, history_cut)
            save_history()
            
            await update.effective_message.reply_text("üîÅ –ü–æ–≤—Ç–æ—Ä—é –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ü–µ–Ω—É...")
            call_scene_after = True

        # If the last reply is from the bot, we can repeat the last message
        elif bot_state.is_valid_last_exchange(user_id, scenario_file):
            history_cut = history[:-2]
            bot_state.update_user_history(user_id, scenario_file, history_cut, last_input=user_data["last_input"])
            save_history()

            await update.effective_message.reply_text("üîÅ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç...")
            override_input = user_data["last_input"]

        else:
            await update.effective_message.reply_text("‚ö†Ô∏è –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –≤–æ–∑–º–æ–∂–Ω–∞.")
            return

    if call_scene_after:
        await scene_command(update, context)
    elif override_input:
        await handle_message(update, context, override_input=override_input)    





# /continue handler
async def continue_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # This function is called when the user clicks the "Continue" button
    await handle_message(update, context, override_input="–ü—Ä–æ–¥–æ–ª–∂–∞–π")





# /edit handler
async def edit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    
    char, world, _, scenario_file, error = bot_state.get_user_character_and_world(user_id)
    if error:
        await update.effective_message.reply_text(error, parse_mode="Markdown")
        return

    lock = bot_state.get_user_lock(user_id)
    async with lock:

        user_data = bot_state.get_user_history(user_id, scenario_file)

        if not user_data or "last_input" not in user_data:
            await update.effective_message.reply_text("‚ùó –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        char_name = char["name"]

        if bot_state.is_valid_last_exchange(user_id, scenario_file):
            history_cut = user_data["history"][:-2]
            bot_state.update_user_history(user_id, scenario_file, history_cut, last_input=user_data["last_input"])
            save_history()
            if bot_state.debug_mode:
                print(f"‚úÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±—Ä–µ–∑–∞–Ω–∞ –Ω–∞ 2 —Å–æ–æ–±—â–µ–Ω–∏—è (edit)")
        else:
            await update.effective_message.reply_text("‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.")
            return

    await update.effective_message.reply_text(
        f"üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Å–≤–æ—ë –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{user_data['last_input']}",
        reply_markup=ForceReply(selective=True)
    )




# /history handler
async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    # Getting character and world for the user
    role_entry = bot_state.get_user_role(user_id)
    if not role_entry or not role_entry.get("scenario"):
        await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –ø–æ–º–æ—â—å—é /scenario.")
        return

    scenario_file = role_entry["scenario"]
    user_data = bot_state.get_user_history(user_id, scenario_file)
    history = user_data.get("history", [])

    if not history:
        await update.message.reply_text("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å!")
        return

    # Getting characters and emoji for the user
    characters, world = load_characters(os.path.join(SCENARIOS_DIR, scenario_file))
    user_emoji = world.get("user_emoji", "üßë")

    # Formatting history
    formatted_lines = []
    for line in history:
        if line.startswith("Narrator:"):
            text = line[len("Narrator:"):].strip()
            formatted_lines.append(f"üìú: {text}")
        elif line.startswith(f"{user_emoji}:"):
            text = line[len(f"{user_emoji}:"):].strip()
            formatted_lines.append(f"{user_emoji}: {text}")
        else:
            # Checking if the line starts with a character name
            for char_key, char_data in characters.items():
                if line.startswith(f"{char_data['name']}:"):
                    text = line[len(f"{char_data['name']}:"):].strip()
                    formatted_lines.append(f"{char_data.get('emoji', 'ü§ñ')}: {text}")
                    break
            else:
                formatted_lines.append(line)
    
    # Splitting into chunks if too long
    chunks = []
    current = ""
    for line in formatted_lines:
        if len(current) + len(line) + 1 > MAX_LENGTH:
            chunks.append(current)
            current = ""
        current += line + "\n"
    if current:
        chunks.append(current)

    for chunk in chunks:
        formatted_chunk = safe_markdown_v2(chunk)
        await safe_send_markdown(update, formatted_chunk, chunk)





# /reset handler
async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    role_entry = bot_state.get_user_role(user_id)
    if not role_entry:
        await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ —Ä–æ–ª—å: /scenario ‚Üí /role")
        return

    scenario_file = role_entry.get("scenario")
    if not scenario_file:
        await update.message.reply_text("‚ùó –£ —Ç–µ–±—è –Ω–µ –≤—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π. –ù–∞–ø–∏—à–∏ /scenario.")
        return

    # Reset history for the user in the current scenario
    lock = bot_state.get_user_lock(user_id)
    async with lock:

        bot_state.user_history.setdefault(user_id, {})[scenario_file] = {
            "history": [],
            "last_input": "",
            "last_bot_id": None
        }

    await update.message.reply_text(
        "üîÅ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞! –¢—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∑–∞–Ω–æ–≤–æ —Å —Ç–µ–∫—É—â–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º ‚ú®\n\n"
    )

    # If intro_scene exists, load it and send to the user
    lock = bot_state.get_user_lock(user_id)
    async with lock:

        try:
            _, world = load_characters(os.path.join(SCENARIOS_DIR, scenario_file))
            intro_scene = world.get("intro_scene", "")
            if intro_scene:
                user_data = bot_state.get_user_history(user_id, scenario_file)
                narrator_entry = f"Narrator: {intro_scene}"
                user_data["history"].append(narrator_entry)
                bot_state.update_user_history(user_id, scenario_file, user_data["history"])
                save_history()
                formatted_intro = safe_markdown_v2(intro_scene)
                await safe_send_markdown(update, formatted_intro, intro_scene)
        except Exception as e:
            if bot_state.debug_mode:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å intro_scene –ø–æ—Å–ª–µ reset: {e}")

        save_history()

    await update.message.reply_text(
        "üí° –•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å —Å—é–∂–µ—Ç–Ω–æ–π —Å—Ü–µ–Ω—ã? –ü–æ–ø—Ä–æ–±—É–π /scene üé¨"
    )





# /lang handler
async def lang_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    _, _, _, scenario_file, error = bot_state.get_user_character_and_world(user_id)
    if error:
        await update.message.reply_text(error)
        return

    lock = bot_state.get_user_lock(user_id)
    async with lock:

        role_entry = bot_state.get_user_role(user_id)
        current_value = role_entry.get("use_translation", False)
        new_value = not current_value

        bot_state.set_user_role(
            user_id,
            role=role_entry.get("role"),
            scenario_file=scenario_file,
            use_translation=new_value
        )

        save_roles()

    status = "–≤–∫–ª—é—á—ë–Ω üåç" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω üîá"
    await update.message.reply_text(f"–ü–µ—Ä–µ–≤–æ–¥ {status}.\n–¢–µ–ø–µ—Ä—å –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç {'–¥—É–º–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ-—Ä—É—Å—Å–∫–∏' if new_value else '—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ'} ‚ò∫Ô∏è")





# /help handler
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    role_entry = bot_state.get_user_role(user_id)
    lang = "RU"
    roles_text = "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ /scenario."

    if role_entry and "scenario" in role_entry:
        scenario_file = role_entry["scenario"]
        scenario_path = os.path.join(SCENARIOS_DIR, scenario_file)
        use_translation = role_entry.get("use_translation", False)
        lang = "EN" if use_translation else "RU"

        try:
            characters, _ = load_characters(scenario_path)
            role_lines = [
                f"‚Ä¢ *{char['name']}* ‚Äî {char['description']} {char['emoji']}"
                for char in characters.values()
            ]
            roles_text = "\n".join(role_lines)
        except Exception as e:
            roles_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}"
    
    service_config = bot_state.get_user_service_config(user_id)
    service_name = service_config.get("name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    await update.message.reply_text(
        "üÜò *–ü–æ–º–æ—â—å*\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ /scenario ‚Äî –≤—ã–±—Ä–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏\n"
        "‚Ä¢ /role ‚Äî –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Ä–æ–ª–µ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ /scene ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—É—é —Å—Ü–µ–Ω—É ‚ú®\n"
        "‚Ä¢ /whoami ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å, –∫—Ç–æ —Ç—ã –≤ —ç—Ç–æ–º –º–∏—Ä–µ\n"
        "‚Ä¢ /retry ‚Äî –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞\n"
        "‚Ä¢ /continue ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ coo–±—â–µ–Ω–∏–µ –±–æ—Ç–∞\n"        
        "‚Ä¢ /edit ‚Äî –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ /history ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º –º–∏—Ä–µ\n"
        "‚Ä¢ /reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
        "‚Ä¢ /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "‚Ä¢ /service ‚Äî —Å–º–µ–Ω–∏—Ç—å –¥—É–º–∞—Ç–µ–ª—å\n"
        f"–°–µ–π—á–∞—Å –≤–∫–ª—é—á–µ–Ω –¥—É–º–∞—Ç–µ–ª—å: *{service_name}*.\n\n"
        "‚Ä¢ /lang ‚Äî —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –¥—É–º–∞—Ç–µ–ª—è –±–æ—Ç–∞ (EN/RUS). "
        "*EN* - –±–æ—Ç –¥—É–º–∞–µ—Ç –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏, –≥–æ–≤–æ—Ä–∏—Ç –ø–æ —Ä—É—Å—Å–∫–∏. *RU* - –≤—Å–µ –ø–æ —Ä—É—Å—Å–∫–∏.\n"
        f"–°–µ–π—á–∞—Å –≤–∫–ª—é—á–µ–Ω —è–∑—ã–∫: *{lang}*.\n\n"
        "–¢–∞–∫–∂–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥:\n"
        "üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å ‚Äî /retry,\n"
        "‚è≠ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî /continue,\n"
        "‚úÇÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å ‚Äî /edit.\n\n"
        "üìå –í—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ —Ä–æ–ª—å, –∞ –∑–∞—Ç–µ–º –ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≤ –µ—ë —Å—Ç–∏–ª–µ!\n\n"
        "*üí° –ö–∞–∫ –ø–∏—Å–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è:*\n"
        "–¢—ã –º–æ–∂–µ—à—å –Ω–µ —Ç–æ–ª—å–∫–æ –≥–æ–≤–æ—Ä–∏—Ç—å, –Ω–æ –∏ –æ–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è, –∏–ª–∏ –¥–∞—Ç—å —É–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π *–∑–≤—ë–∑–¥–æ—á–∫–∏*:\n"
        "`*—É–ª—ã–±–∞–µ—Ç—Å—è –∏ –º–∞—à–µ—Ç —Ä—É–∫–æ–π*`\n"
        "`*–æ–ø–∏—à–∏ –º–µ—Å—Ç–æ, –∫—É–¥–∞ –º—ã –ø—Ä–∏—à–ª–∏*`\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤ —Ç–µ–∫—É—â–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–æ–ª–∏:*\n"
        f"{roles_text}",
        parse_mode="Markdown"
    )






# Function to handle incoming messages
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE, override_input=None):
    user_input = override_input or update.message.text

    user_obj = update.effective_user
    user_id = str(user_obj.id)
    username = user_obj.username or ""
    full_name = user_obj.full_name or ""

    # Getting character and world info
    char, world, characters, scenario_file, error = bot_state.get_user_character_and_world(user_id)
    if error:
        await update.message.reply_text(error, parse_mode="Markdown")
        return

    role_entry = bot_state.get_user_role(user_id)
    default_role = next(iter(characters))
    role_key = role_entry.get("role") if role_entry else default_role

    # Logging user input
    bot_state.append_to_archive_user(
        user_id,
        role_key,
        "user",
        user_input,
        username,
        full_name,
        scenario_file=scenario_file,
        world_name=world.get("name", "")
    )

    # Tokenization and prompt preparation
    user_role_description = world.get("user_role", "")
    world_prompt = world.get("system_prompt", "")
    base_prompt = f"{world_prompt}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî {user_role_description}.\n{char['prompt']}\n"

    service_config = bot_state.get_user_service_config(user_id)
    if service_config is None:
        await update.effective_message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥—É–º–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π /service.")
        return
    encoding = tiktoken.get_encoding(service_config.get("tiktoken_encoding", "gpt2"))
    tokens_used = len(encoding.encode(base_prompt))

    # Getting user history and trimming it if necessary
    lock = bot_state.get_user_lock(user_id)
    async with lock:
        user_data = bot_state.get_user_history(user_id, scenario_file)

        history = user_data["history"]
        
        max_tokens = service_config.get("max_tokens", 7000)
        trimmed_history, tokens_used = smart_trim_history(history, encoding,
                                                        max_tokens - tokens_used)

        user_emoji = world.get("user_emoji", "üßë")
        user_message = f"{user_emoji}: {user_input}"
        user_message_tokens = len(encoding.encode(user_message + "\n"))

        # Adding user message to trimmed history if it fits
        if tokens_used + user_message_tokens <= max_tokens:
            trimmed_history.append(user_message)
            tokens_used += user_message_tokens
        else:
            # Trimming history until it fits
            while trimmed_history and tokens_used + user_message_tokens > max_tokens:
                removed = trimmed_history.pop(0)
                tokens_used -= len(encoding.encode(removed + "\n"))

            trimmed_history.append(user_message)
            tokens_used += user_message_tokens
        
        total_prompt_tokens = tokens_used

        bot_state.update_user_history(user_id, scenario_file, trimmed_history, last_input=user_input)
        save_history()

    if service_config.get("chatml", False):
        # ChatML-prompt
        system_text = (
            f"{world_prompt.strip()}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî {user_role_description.strip()}.\n"
            f"{char['prompt'].strip()}\n"
            f"–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç *–≤ –∑–≤—ë–∑–¥–æ—á–∫–∞—Ö* ‚Äî —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.\n"
            f"–†–µ–∞–≥–∏—Ä—É–π –Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—è –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç.\n"
            f"–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É. –ü–∏—à–∏ –∫–∞–∫ –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –Ω–æ–≤–µ–ª–ª–µ: –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–ø–ª–∏–∫–∏, –º–µ–Ω—å—à–µ –æ–ø–∏—Å–∞–Ω–∏–π."
        )
        prompt = build_chatml_prompt(system_text, trimmed_history, user_emoji, char["name"])

    else:
        # Plain text prompt
        prompt = build_plain_prompt(base_prompt, trimmed_history, char['name'])

    thinking_message = None

    stop_typing = asyncio.Event()
    typing_task = asyncio.create_task(show_typing_animation(context, update.effective_chat.id, stop_typing))

    try:
        emoji = char.get("emoji", "")
        
        service_config = bot_state.get_user_service_config(user_id)
        service_type = service_config.get("type")
        match service_type:
            case "ollama":
                send_func = send_prompt_to_ollama
            case "gigachat":
                send_func = send_prompt_to_gigachat
            case _:
                raise ValueError(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞: {service_type}")
      
        _, my_position = await send_func(
            user_id,
            prompt,
            bot_state,
            use_translation = role_entry.get("use_translation", False),
            translate_func = translate_prompt_to_english,
            reverse_translate_func = translate_prompt_to_russian,
            get_position_only = True
        )

        if my_position > 1:
            await update.effective_message.reply_text(
                f"‚è≥ –°–µ–π—á–∞—Å –¥—É–º–∞—Ç–µ–ª—å –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º–∏... –¢—ã ‚Äî *{my_position}-–π* –≤ –æ—á–µ—Ä–µ–¥–∏.",
                parse_mode="Markdown"
            )

        thinking_message = await update.effective_message.reply_text(f"{emoji} {char['name']} –¥—É–º–∞–µ—Ç... ü§î")

        reply, _ = await send_func(
            user_id,
            prompt,
            bot_state,
            use_translation = role_entry.get("use_translation", False),
            translate_func=translate_prompt_to_english,
            reverse_translate_func=translate_prompt_to_russian
        )

        if bot_state.debug_mode:
            print(f"\nüìä [Debug] –¢–æ–∫–µ–Ω–æ–≤ –≤ prompt: {total_prompt_tokens} / {max_tokens}\n")

        # History update
        async with lock:
            trimmed_history.append(f"{char['name']}: {reply}")
            save_history()
            bot_state.append_to_archive_user(
                user_id,
                role_key,
                "assistant",
                reply,
                username,
                full_name,
                scenario_file=scenario_file,
                world_name=world.get("name", "")
            )

    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏: {e}"

    finally:
        stop_typing.set()
        await typing_task
        
        if thinking_message:
            try:
                await thinking_message.delete()
            except Exception as e:
                if bot_state.debug_mode:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # ‚õî If reply is empty or None, show an error message
    if not reply.strip():
        reply = "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
        if bot_state.debug_mode:
            print("‚ö†Ô∏è [Debug] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç ‚Äî –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.")
    else:
        emoji = char.get("emoji", "")
        reply = f"{emoji} {reply}".strip()

    formatted_reply = safe_markdown_v2(reply)
    buttons = [[
        InlineKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="cb_retry"),
        InlineKeyboardButton("‚è≠ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_reply"),
        InlineKeyboardButton("‚úÇÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="cb_edit")
    ]]
    bot_msg = await safe_send_markdown(update, formatted_reply, reply, buttons)

    async with lock:
        bot_state.update_user_history(user_id, scenario_file, trimmed_history, last_bot_id=bot_msg.message_id)





# Button handler for editting the last message
async def handle_force_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message and "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Å–≤–æ—ë –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" in update.message.reply_to_message.text:
        # Chande the last message to the new one
        update.message.text = update.message.text
        await handle_message(update, context)






# scenario_button handler
async def scenario_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query: CallbackQuery = update.callback_query
    await query.answer()

    selected_file = query.data.split(":", 1)[1].strip()
    scenario_path = os.path.join(SCENARIOS_DIR, selected_file)
    user_id = str(query.from_user.id)

    try:
        characters, world = load_characters(scenario_path)
        bot_state.set_world_info(user_id, world)

        # History management
        lock = bot_state.get_user_lock(user_id)
        async with lock:

            user_histories = bot_state.user_history.setdefault(user_id, {})
            if selected_file not in user_histories:
                user_histories[selected_file] = {
                    "history": [],
                    "last_input": "",
                    "last_bot_id": None
                }

            # Getting translation flag from the previous role
            prev_role = bot_state.get_user_role(user_id)
            use_translation = prev_role.get("use_translation", False) if prev_role else False        
            
            # Deleting user role
            bot_state.clear_user_role(user_id)
            bot_state.set_user_role(user_id, role=None, scenario_file=selected_file, use_translation=use_translation)

            save_roles()
            save_history()

        # Roles list
        role_lines = [
            f"‚Ä¢ *{char['name']}* ‚Äî {char['description']} {char['emoji']}"
            for _, char in characters.items()
        ]
        roles_text = "\n".join(role_lines)

        user_role = world.get("user_role", "")
        user_emoji = world.get("user_emoji", "üë§")
        user_role_line = f"\nüé≠ *–¢—ã –≤ —ç—Ç–æ–º –º–∏—Ä–µ:* {user_emoji} _{user_role}_" if user_role else ""

        await query.edit_message_text(
            f"üéÆ –°—Ü–µ–Ω–∞—Ä–∏–π *{world.get('name', selected_file)}* –∑–∞–≥—Ä—É–∂–µ–Ω! {world.get('emoji', '')}\n"
            f"üìù _{world.get('description', '')}_\n"
            f"{user_role_line}\n\n"
            f"*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:*\n{roles_text}\n\n"
            f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–∏—Ä–∞: /role\n"
            f"üí° –ú–æ–∂–µ—à—å –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏—Ç—å —Å—é–∂–µ—Ç–Ω—É—é —Å—Ü–µ–Ω—É: /scene üé¨",
            parse_mode="Markdown"
        )

        # If intro_scene and history is empty ‚Äî show intro scene
        lock = bot_state.get_user_lock(user_id)
        async with lock:
            
            intro_scene = world.get("intro_scene", "")
            user_data = bot_state.get_user_history(user_id, selected_file)

            if intro_scene and not user_data["history"]:
                narrator_entry = f"Narrator: {intro_scene}"
                user_data["history"].append(narrator_entry)
                bot_state.update_user_history(user_id, selected_file, user_data["history"])
                save_history()
                formatted_intro = safe_markdown_v2(intro_scene)
                await safe_send_markdown(update, formatted_intro, intro_scene)
        
            # If history is not empty ‚Äî show last two messages
            elif user_data["history"]:
                recent_messages = user_data["history"][-2:]
                user_emoji = world.get("user_emoji", "üßë")

                for line in recent_messages:
                    if line.startswith("Narrator:"):
                        text = line[len("Narrator:"):].strip()
                        formatted =f"üìú {text}"
                    elif line.startswith(f"{user_emoji}:"):
                        text = line[len(f"{user_emoji}:"):].strip()
                        formatted = f"{user_emoji} {text}"
                    else:
                        # Checking every character for a match
                        found = False
                        for _, char_data in characters.items():
                            if line.startswith(f"{char_data['name']}:"):
                                text = line[len(f"{char_data['name']}:"):].strip()
                                formatted = f"{char_data.get('emoji', 'ü§ñ')} {text}"
                                found = True
                                break
                        
                        if not found:
                            formatted = line
                    
                markdown_formatted = safe_markdown_v2(formatted)
                await safe_send_markdown(update, markdown_formatted, formatted)

    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")






# role_button handler
async def role_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query: CallbackQuery = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    role_key = query.data

    role_entry = bot_state.get_user_role(user_id)
    if not role_entry or "scenario" not in role_entry:
        await query.edit_message_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ /scenario.")
        return

    scenario_file = role_entry["scenario"]
    scenario_path = os.path.join(SCENARIOS_DIR, scenario_file)

    try:
        characters, world = load_characters(scenario_path)
    except Exception as e:
        await query.edit_message_text(f"‚ùó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        return

    if role_key not in characters:
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏.")
        return

    # saiving the translation flag
    use_translation = role_entry.get("use_translation", False)

    # new translation flag
    lock = bot_state.get_user_lock(user_id)
    async with lock:

        bot_state.set_user_role(user_id, role=role_key, scenario_file=scenario_file,
                                use_translation=use_translation)
        save_roles()

    char = characters[role_key]
    await query.edit_message_text(
        f"–¢–µ–ø–µ—Ä—å —Ç—ã –æ–±—â–∞–µ—à—å—Å—è —Å {char['name']} {char.get('emoji', '')}.\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî –∏ —è –æ—Ç–≤–µ—á—É —Ç–µ–±–µ! üé≠"
    )



# service_button handler
async def service_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query: CallbackQuery = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    selected_service = query.data.split(":", 1)[1].strip()

    services = bot_state.config.get("services", {})
    if selected_service not in services:
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    service_name = services[selected_service].get("name", selected_service)

    # Current user role
    user_role = bot_state.get_user_role(user_id) or {}

    # "service" update
    lock = bot_state.get_user_lock(user_id)
    async with lock:

        bot_state.set_user_role(
            user_id,
            role=user_role.get("role"),
            scenario_file=user_role.get("scenario"),
            use_translation=user_role.get("use_translation", False),
            service=selected_service
        )

        if bot_state.debug_mode:
            new_role = bot_state.get_user_role(user_id)
            print(f"üìÑ user_role –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {json.dumps(new_role, indent=2, ensure_ascii=False)}")

        save_roles()

    await query.edit_message_text(f"üß† –¢–µ–ø–µ—Ä—å —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –¥—É–º–∞—Ç–µ–ª—å: *{service_name}* ‚ú®", parse_mode="Markdown")




# continue_reply handler
async def continue_reply_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query: CallbackQuery = update.callback_query
    await query.answer()
    #/continue command is called from the callback
    await continue_command(update, context)





# retry_callback handler
async def retry_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query: CallbackQuery = update.callback_query
    await query.answer()
    # /retry command is called from the callback
    await retry_command(update, context)
    


# edit_callback handler
async def edit_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query: CallbackQuery = update.callback_query
    await query.answer()
    # /edit_command is called from the callback
    await edit_command(update, context)