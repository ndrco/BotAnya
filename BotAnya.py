import json
import os
from datetime import datetime
import asyncio
from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ForceReply
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes, CommandHandler, CallbackQueryHandler
from telegram.helpers import escape_markdown
import requests
import re
import tiktoken


# –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
CONFIG_FILE = os.path.join(BASE_DIR, "config.json")
SCENARIOS_DIR = os.path.join(BASE_DIR, "scenarios")
ROLES_FILE = os.path.join(BASE_DIR, "user_roles.json")
HISTORY_FILE = os.path.join(BASE_DIR, "history.json")
LOG_DIR = os.path.join(BASE_DIR, "chat_logs")




class BotState:
    def __init__(self):

        self.user_roles = {}
        self.user_history = {}
        self.user_world_info = {}
        self.config = {}
        self.max_tokens = 7000
        self.enc = None
        self.model = ""
        self.ollama_url = ""
        self.debug_mode = True
        self.bot_token = ""

    def __str__(self):
        return (
            f"BotState(model={self.model}, url={self.ollama_url}, "
            f"max_tokens={self.max_tokens}, debug={self.debug_mode} ,"
            f"roles={len(self.user_roles)}, history={len(self.user_history)}, "
            f"bot_token={self.bot_token}, enc={self.enc})"
        )
    
    # === –†–û–õ–ò ===
    def get_user_role(self, user_id):
        return self.user_roles.get(str(user_id))

    def set_user_role(self, user_id, role, scenario_file):
        self.user_roles[str(user_id)] = {
            "role": role,
            "scenario": scenario_file
        }

    def clear_user_role(self, user_id):
        if str(user_id) in self.user_roles:
            self.user_roles[str(user_id)]["role"] = None

    # === –ò–°–¢–û–†–ò–Ø ===
    def get_user_history(self, user_id):
        return self.user_history.setdefault(str(user_id), {
            "history": [],
            "last_input": "",
            "last_bot_id": None
        })

    def update_user_history(self, user_id, history, last_input="", last_bot_id=None):
        data = self.get_user_history(user_id)
        data["history"] = history
        if last_input:
            data["last_input"] = last_input
        if last_bot_id is not None:
            data["last_bot_id"] = last_bot_id
        self.user_history[str(user_id)] = data

    def cut_last_exchange(self, user_id):
        data = self.get_user_history(user_id)
        if len(data["history"]) >= 2:
            data["history"] = data["history"][:-2]
            return True
        return False

    # === WORLD_INFO ===
    def set_world_info(self, user_id, world_data):
        self.user_world_info[str(user_id)] = world_data

    def get_world_info(self, user_id):
        return self.user_world_info.get(str(user_id), {})
    
    # === –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–û–°–õ–ï–î–ù–ï–ô –ü–ê–†–´ ===
    def is_valid_last_exchange(self, user_id, char_name, world):
        data = self.get_user_history(user_id)
        history = data.get("history", [])
        if len(history) < 2:
            return False

        last_msg = history[-2]
        last_reply = history[-1]

        user_prefix = f"{world.get('user_emoji', 'üë§')}:"
        assistant_prefix = f"{char_name}:"

        return last_msg.startswith(user_prefix) and last_reply.startswith(assistant_prefix)


bot_state = BotState()



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def init_config():
    config = load_config()

    bot_state.config = config
    bot_state.max_tokens = config.get("max_tokens", 7000)
    bot_state.model = config.get("model", "saiga_nemo_12b.Q8_0:latest")
    bot_state.ollama_url = config.get("ollama_url", "http://localhost:11434/api/generate")
    bot_state.debug_mode = config.get("debug_mode", True)
    bot_state.bot_token = config.get("Telegram_bot_token", "")

    try:
        bot_state.enc = tiktoken.get_encoding(config.get("tiktoken_encoding", "gpt2"))
    except Exception:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–Ω–∫–æ–¥–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—é gpt2 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        bot_state.enc = tiktoken.get_encoding("gpt2")





# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ config.json
def load_config():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            if data.get("debug_mode", True):
                print("üõ†Ô∏è [DEBUG] –ó–∞–≥—Ä—É–∂–µ–Ω config.json:")
                print(json.dumps(data, indent=2, ensure_ascii=False))
            return data
    raise FileNotFoundError("–§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")



# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
def load_characters(scenario_path: str):
    if os.path.exists(scenario_path):
        with open(scenario_path, "r", encoding="utf-8") as f:
            data = json.load(f)

            world = data.get("world", {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∏—Ä", "description": ""})
            characters = data.get("characters", {})

            if bot_state.debug_mode:
                print(f"üåç –ú–∏—Ä: {world['name']} ‚Äî {world['description']}")
                print("üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏:")
                for key, char in characters.items():
                    print(f"  üß¨ [{key}] {char['name']} {char.get('emoji', '')} ‚Äî {char['description']}")

            return characters, world

    raise FileNotFoundError(f"–§–∞–π–ª {scenario_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")




# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def load_roles():
    if os.path.exists(ROLES_FILE):
        with open(ROLES_FILE, "r", encoding="utf-8") as f:
            bot_state.user_roles = json.load(f)
    else:
        bot_state.user_roles = {}         



# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_roles():
    with open(ROLES_FILE, "w", encoding="utf-8") as f:
        json.dump(bot_state.user_roles, f, ensure_ascii=False, indent=2)



## –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def load_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            bot_state.user_history = json.load(f)
    else:
        bot_state.user_history = {}


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª
def save_history():
    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(bot_state.user_history, f, ensure_ascii=False, indent=2)



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª
def append_to_archive_user(
    user_id: str,
    role_name: str,
    speaker: str,
    text: str,
    username: str = "",
    full_name: str = "",
    scenario_file: str = "",
    world_name: str = ""
):

    if not os.path.exists(LOG_DIR):
        os.makedirs(LOG_DIR)

    date_str = datetime.now().strftime("%Y-%m-%d")
    file_path = os.path.join(LOG_DIR, f"{user_id}_{date_str}.jsonl")

    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "user_id": user_id,
        "username": username,
        "full_name": full_name,
        "character": role_name,
        "speaker": speaker,
        "text": text,
        "scenario": scenario_file,
        "world": world_name
    }

    with open(file_path, "a", encoding="utf-8") as f:
        f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown-—Ä–∞–∑–º–µ—Ç–∫–∏
def safe_markdown_v2(text: str) -> str:
    # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º **–∂–∏—Ä–Ω—ã–π** –∏ *–∫—É—Ä—Å–∏–≤* –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏
    text = re.sub(r'\*\*(.+?)\*\*', r'%%BOLD%%\1%%BOLD%%', text)
    text = re.sub(r'\*(.+?)\*', r'%%ITALIC%%\1%%ITALIC%%', text)

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é
    escaped_text = escape_markdown(text, version=2)

    # –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∂–∏—Ä–Ω—ã–π –∏ –∫—É—Ä—Å–∏–≤ (—É–∂–µ –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
    escaped_text = escaped_text.replace('%%BOLD%%', '*')
    escaped_text = escaped_text.replace('%%ITALIC%%', '_')

    return escaped_text



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –º–∏—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_character_and_world(user_id: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (char, world, characters, scenario_file) –∏–ª–∏ (None, None, None, None) + —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    role_entry = bot_state.get_user_role(user_id)

    if not role_entry or not isinstance(role_entry, dict):
        return None, None, None, None, "üòø –¢—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞–ø–∏—à–∏ /role."

    role_key = role_entry.get("role")
    scenario_file = role_entry.get("scenario")

    if not role_key or not scenario_file:
        return None, None, None, None, "üòø –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –∏–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏. –ù–∞–ø–∏—à–∏ /role."

    scenario_path = os.path.join(SCENARIOS_DIR, scenario_file)
    if not os.path.exists(scenario_path):
        return None, None, None, None, f"‚ùó –°—Ü–µ–Ω–∞—Ä–∏–π *{scenario_file}* –Ω–µ –Ω–∞–π–¥–µ–Ω."

    try:
        characters, world = load_characters(scenario_path)
    except Exception as e:
        return None, None, None, None, f"‚ùó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}"

    char = characters.get(role_key)
    if not char:
        return None, None, None, None, (
            f"‚ö†Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ *{role_key}* –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ *{world.get('name', scenario_file)}*.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–≥–æ: /role"
        )

    return char, world, characters, scenario_file, None






# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    user_id = str(update.effective_user.id)

    char, _, _, _, error = get_user_character_and_world(user_id)
    if error:
        if "–Ω–µ –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞" in error:
            # üí¨ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞
            await update.message.reply_text(
                "–ü—Ä–∏–≤–µ—Ç–∏–∫! üêæ –Ø ‚Äî —Ä–æ–ª–µ–≤–æ–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –æ—Ç –∏–º–µ–Ω–∏ —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π: /scenario –∏ —Å –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å –æ–±—â–∞—Ç—å—Å—è: /role\n"
                "–ê –ø–æ—Ç–æ–º –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ ‚Äî –∏ –Ω–∞—á–Ω—ë–º –º–∞–≥–∏—á–µ—Å–∫–æ–µ –æ–±—â–µ–Ω–∏–µ! ‚ú®"
            )
        else:
            # ‚ö†Ô∏è –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            await update.message.reply_text(error, parse_mode="Markdown")
        return
        
    # üíï –í—Å—ë —Ö–æ—Ä–æ—à–æ ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ!
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: *{char['name']}* {char.get('emoji', '')}\n\n"
        f"–ú–æ–∂–µ—à—å —Å—Ä–∞–∑—É –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî –∏ —è –æ—Ç–≤–µ—á—É —Ç–µ–±–µ –∫–∞–∫ {char['name']}.\n"
        f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å ‚Äî –Ω–∞–ø–∏—à–∏ /role üòä",
        parse_mode="Markdown"
    )




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    role_entry = bot_state.get_user_role(user_id)

    roles_text = "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ /scenario."

    if role_entry and "scenario" in role_entry:
        scenario_file = role_entry["scenario"]
        scenario_path = os.path.join(SCENARIOS_DIR, scenario_file)
        try:
            characters, _ = load_characters(scenario_path, debug=bot_state.debug_mode)
            role_lines = [
                f"‚Ä¢ *{char['name']}* ‚Äî {char['description']} {char['emoji']}"
                for char in characters.values()
            ]
            roles_text = "\n".join(role_lines)
        except Exception as e:
            roles_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}"

    await update.message.reply_text(
        "üÜò *–ü–æ–º–æ—â—å*\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ /whoami ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å, –∫—Ç–æ —Ç—ã –≤ —ç—Ç–æ–º –º–∏—Ä–µ\n"
        "‚Ä¢ /reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ —Ä–æ–ª—å\n"
        "‚Ä¢ /retry ‚Äî –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ /edit ‚Äî –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ /scenario ‚Äî –≤—ã–±—Ä–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏\n"
        "‚Ä¢ /role ‚Äî –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Ä–æ–ª–µ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è\n\n"
        "üìå –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ —Ä–æ–ª—å, –∞ –∑–∞—Ç–µ–º –ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≤ –µ—ë —Å—Ç–∏–ª–µ!\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:*\n"
        f"{roles_text}",
        parse_mode="Markdown"
    )




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /role
async def set_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    role_entry = bot_state.get_user_role(user_id)

    if not role_entry or "scenario" not in role_entry:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ /scenario.")
        return

    scenario_file = role_entry["scenario"]
    scenario_path = os.path.join(SCENARIOS_DIR, scenario_file)

    try:
        characters, _ = load_characters(scenario_path)
    except Exception as e:
        await update.message.reply_text(f"‚ùó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        return

    keyboard = [
        [InlineKeyboardButton(characters[key]["name"], callback_data=key)]
        for key in characters
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=reply_markup)





# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /reset
async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    # –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å –∏ –∏—Å—Ç–æ—Ä–∏—é –∏–∑ bot_state
    bot_state.user_roles.pop(user_id, None)
    bot_state.user_history.pop(user_id, None)
    bot_state.user_world_info.pop(user_id, None)

    save_roles()
    save_history()

    await update.message.reply_text(
        "üîÅ –í—Å—ë —Å–±—Ä–æ—à–µ–Ω–æ! –ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /scenario –∏ /role  üßπ"
    )




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /whoami
async def whoami_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    
    char, world, _, scenario_file, error = get_user_character_and_world(user_id)
    if error:
        await update.message.reply_text(error, parse_mode="Markdown")
        return

    user_role_desc = world.get("user_role", "")

    text = (
        f"üë§ *–¢–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫:* {char['name']} {char.get('emoji', '')}\n"
        f"üß¨ _{char['description']}_\n\n"
        f"üåç *–ú–∏—Ä:* {world.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} {world.get('emoji', '')}\n"
        f"üìù _{world.get('description', '')}_\n"
    )

    if user_role_desc:
        user_emoji = world.get("user_emoji", "üë§")
        text += f"\nüé≠ *–¢—ã –≤ —ç—Ç–æ–º –º–∏—Ä–µ:* {user_emoji} _{user_role_desc}_"

    text += f"\n\nüìÇ *–°—Ü–µ–Ω–∞—Ä–∏–π:* `{scenario_file}`"

    await update.message.reply_text(text, parse_mode="Markdown")




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /edit
async def edit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data = bot_state.get_user_history(user_id)

    if not user_data or "last_input" not in user_data:
        await update.message.reply_text("‚ùó –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    char, world, _, _, error = get_user_character_and_world(user_id)
    if error:
        await update.message.reply_text(error, parse_mode="Markdown")
        return

    char_name = char["name"]

    if bot_state.is_valid_last_exchange(user_id, char_name, world):
        history_cut = user_data["history"][:-2]
        bot_state.update_user_history(user_id, history_cut, last_input=user_data["last_input"])
        save_history()
        if bot_state.debug_mode:
            print(f"‚úÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±—Ä–µ–∑–∞–Ω–∞ –Ω–∞ 2 —Å–æ–æ–±—â–µ–Ω–∏—è (edit)")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.")
        return

    await update.message.reply_text(
        f"üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Å–≤–æ—ë –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{user_data['last_input']}",
        reply_markup=ForceReply(selective=True)
    )






# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /retry
async def retry_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data = bot_state.get_user_history(user_id)

    if not user_data or "last_input" not in user_data:
        await update.message.reply_text("‚ùó –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞.")
        return

    char, world, _, _, error = get_user_character_and_world(user_id)
    if error:
        await update.message.reply_text(error, parse_mode="Markdown")
        return

    char_name = char["name"]

    if bot_state.is_valid_last_exchange(user_id, char_name, world):
        history_cut = user_data["history"][:-2]
        bot_state.update_user_history(user_id, history_cut, last_input=user_data["last_input"])
        save_history()
        if bot_state.debug_mode:
            print(f"üîÅ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±—Ä–µ–∑–∞–Ω–∞ –Ω–∞ 2 —Å–æ–æ–±—â–µ–Ω–∏—è (retry)")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å: –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —à–∞–±–ª–æ–Ω—É.")
        return

    await update.message.reply_text("üîÅ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç...")
    await handle_message(update, context, override_input=user_data["last_input"])







# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /scenarios
async def scenario_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    files = [f for f in os.listdir(SCENARIOS_DIR) if f.endswith(".json")]
    buttons = []

    for f in sorted(files):
        path = os.path.join(SCENARIOS_DIR, f)
        try:
            with open(path, "r", encoding="utf-8") as file:
                data = json.load(file)
                world = data.get("world", {})
                world_name = world.get("name", f)
                emoji = world.get("emoji", "üåç")
                buttons.append([InlineKeyboardButton(f"{emoji} {world_name}", callback_data=f"scenario:{f}")])
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {f}: {e}")

    if not buttons:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ –ø–∞–ø–∫–µ /scenarios.")
        return

    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("üåê –í—ã–±–µ—Ä–∏ –º–∏—Ä:", reply_markup=reply_markup)






# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
async def role_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query: CallbackQuery = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    role_key = query.data

    role_entry = bot_state.get_user_role(user_id)
    if not role_entry or "scenario" not in role_entry:
        await query.edit_message_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ /scenario.")
        return

    scenario_file = role_entry["scenario"]
    scenario_path = os.path.join(SCENARIOS_DIR, scenario_file)

    try:
        characters, world = load_characters(scenario_path)
    except Exception as e:
        await query.edit_message_text(f"‚ùó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        return

    if role_key not in characters:
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏.")
        return

    bot_state.set_user_role(user_id, role_key, scenario_file)
    save_roles()

    char = characters[role_key]
    await query.edit_message_text(
        f"–¢–µ–ø–µ—Ä—å —Ç—ã –æ–±—â–∞–µ—à—å—Å—è —Å {char['name']} {char.get('emoji', '')}.\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî –∏ —è –æ—Ç–≤–µ—á—É —Ç–µ–±–µ –≤ –µ—ë —Å—Ç–∏–ª–µ! üé≠"
    )




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
async def handle_force_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message and "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Å–≤–æ—ë –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" in update.message.reply_to_message.text:
        # –ø–æ–¥–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–æ–≤—ã–π –∏ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        update.message.text = update.message.text
        await handle_message(update, context)





# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
async def scenario_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query: CallbackQuery = update.callback_query
    await query.answer()

    selected_file = query.data.split(":", 1)[1].strip()
    scenario_path = os.path.join(SCENARIOS_DIR, selected_file)
    user_id = str(query.from_user.id)

    try:
        characters, world = load_characters(scenario_path)
        bot_state.set_world_info(user_id, world)

        # üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        bot_state.update_user_history(user_id, [], last_input="", last_bot_id=None)
        if bot_state.debug_mode:
            print(f"üßπ –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è.")

        # ‚ùå –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot_state.clear_user_role(user_id)
        bot_state.set_user_role(user_id, None, selected_file)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ü–µ–Ω–∞—Ä–∏–π

        save_roles()
        save_history()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ config.json
        bot_state.config["scenario_file"] = selected_file  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
        with open(CONFIG_FILE, "w", encoding="utf-8") as f:
            json.dump(bot_state.config, f, ensure_ascii=False, indent=2)

        # –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
        role_lines = [
            f"‚Ä¢ *{char['name']}* ‚Äî {char['description']} {char['emoji']}"
            for key, char in characters.items()
        ]
        roles_text = "\n".join(role_lines)

        user_role = world.get("user_role", "")
        user_emoji = world.get("user_emoji", "üë§")
        user_role_line = f"\nüé≠ *–¢—ã –≤ —ç—Ç–æ–º –º–∏—Ä–µ:* {user_emoji} _{user_role}_" if user_role else ""

        await query.edit_message_text(
            f"üéÆ –°—Ü–µ–Ω–∞—Ä–∏–π *{world.get('name', selected_file)}* –∑–∞–≥—Ä—É–∂–µ–Ω! {world.get('emoji', '')}\n"
            f"üìù _{world.get('description', '')}_\n"
            f"{user_role_line}\n\n"
            f"*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:*\n{roles_text}\n\n"
            f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–∏—Ä–∞: /role",
            parse_mode="Markdown"
        )

    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")






# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE, override_input=None):
    user_input = override_input or update.message.text

    user_obj = update.effective_user
    user_id = str(user_obj.id)
    username = user_obj.username or ""
    full_name = user_obj.full_name or ""

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –º–∏—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    char, world, characters, scenario_file, error = get_user_character_and_world(user_id)
    if error:
        await update.message.reply_text(error, parse_mode="Markdown")
        return

    role_entry = bot_state.get_user_role(user_id)
    default_role = next(iter(characters))
    role_key = role_entry.get("role") if role_entry else default_role

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞—Ä—Ö–∏–≤
    append_to_archive_user(
        user_id,
        role_key,
        "user",
        user_input,
        username,
        full_name,
        scenario_file=scenario_file,
        world_name=world.get("name", "")
    )

    # ========== –¢–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è ==========
    user_role_description = world.get("user_role", "")
    world_prompt = world.get("system_prompt", "")
    base_prompt = f"{world_prompt}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî {user_role_description}.\n{char['prompt']}\n"

    tokens_used = len(bot_state.enc.encode(base_prompt))

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    user_data = bot_state.get_user_history(user_id)
    history = user_data["history"]
    trimmed_history = []

    for message in reversed(history):
        message_tokens = len(bot_state.enc.encode(message + "\n"))
        if tokens_used + message_tokens < bot_state.max_tokens:
            trimmed_history.insert(0, message)
            tokens_used += message_tokens
        else:
            break

    user_emoji = world.get("user_emoji", "üßë")
    user_message = f"{user_emoji}: {user_input}"

    user_message_tokens = len(bot_state.enc.encode(user_message + "\n"))
    total_prompt_tokens = tokens_used + user_message_tokens

    if total_prompt_tokens < bot_state.max_tokens:
        trimmed_history.append(user_message)
    else:
        trimmed_history = [user_message]

    bot_state.update_user_history(user_id, trimmed_history, last_input=user_input)
    save_history()

    history_text = "\n".join(trimmed_history)
    prompt = f"{base_prompt}{history_text}\n{char['name']}:"

    payload = {
        "model": bot_state.model,
        "prompt": prompt,
        "stream": False
    }

    if bot_state.debug_mode:
        print("\n" + "="*60)
        print("üü¢ PROMPT, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤ –º–æ–¥–µ–ª—å (—Ç–µ–∫—Å—Ç):\n")
        print(prompt)
        print("="*60)
        print("üì¶ PAYLOAD:")
        print(json.dumps(payload, indent=2, ensure_ascii=False))
        print("="*60)

    try:
        thinking_message = await update.message.reply_text(f"{char['name']} –¥—É–º–∞–µ—Ç... ü§î")
        response = requests.post(bot_state.ollama_url, json=payload, timeout=30)
        data = response.json()
        reply = data["response"]

        trimmed_history.append(f"{char['name']}: {reply}")
        save_history()

        append_to_archive_user(
            user_id,
            role_key,
            "assistant",
            reply,
            username,
            full_name,
            scenario_file=scenario_file,
            world_name=world.get("name", "")
        )

        if bot_state.debug_mode:
            print("üì§ –û—Ç–≤–µ—Ç:")
            print(reply)
            print("="*60)
            print(f"üìä [Debug] –¢–æ–∫–µ–Ω–æ–≤ –≤ prompt: {total_prompt_tokens} / {bot_state.max_tokens}")

    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏: {e}"

    await thinking_message.delete()

    formatted_reply = safe_markdown_v2(reply)
    bot_msg = await update.message.reply_text(formatted_reply, parse_mode="MarkdownV2")
    bot_state.update_user_history(user_id, trimmed_history, last_bot_id=bot_msg.message_id)






# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():

    init_config()

    if not bot_state.bot_token:
        raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ config.json!")

    load_roles()
    load_history()

    app = ApplicationBuilder().token(bot_state.bot_token).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("role", set_role))
    app.add_handler(CommandHandler("reset", reset_command))
    app.add_handler(CommandHandler("retry", retry_command))
    app.add_handler(CommandHandler("edit", edit_command))
    app.add_handler(CommandHandler("scenario", scenario_command))
    app.add_handler(CommandHandler("whoami", whoami_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.REPLY & filters.TEXT, handle_force_reply))
    app.add_handler(CallbackQueryHandler(scenario_button, pattern="^scenario:"))
    app.add_handler(CallbackQueryHandler(role_button))

    await app.bot.set_my_commands([
        BotCommand("scenario", "–í—ã–±—Ä–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π"),
        BotCommand("role", "–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"),
        BotCommand("whoami", "–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ç–æ —è"),
        BotCommand("start", "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥"),
        BotCommand("help", "–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand("retry", "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        BotCommand("edit", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        BotCommand("reset", "–°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ —Ä–æ–ª—å")
    ])

    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    if bot_state.debug_mode:
        print(bot_state)

    await app.run_polling()





# –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())


