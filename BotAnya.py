import json
import os
from typing import List
from datetime import datetime
import asyncio
from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ForceReply
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes, CommandHandler, CallbackQueryHandler
from telegram.helpers import escape_markdown
import requests
import re
import tiktoken
from translate_utils import translate_prompt_to_english, translate_prompt_to_russian


# –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
CONFIG_FILE = os.path.join(BASE_DIR, "config.json")
SCENARIOS_DIR = os.path.join(BASE_DIR, "scenarios")
ROLES_FILE = os.path.join(BASE_DIR, "user_roles.json")
HISTORY_FILE = os.path.join(BASE_DIR, "history.json")
LOG_DIR = os.path.join(BASE_DIR, "chat_logs")




class BotState:
    def __init__(self):

        self.user_roles = {}
        self.user_history = {}
        self.user_world_info = {}
        self.config = {}
        self.max_tokens = 7000
        self.enc = None
        self.model = ""
        self.ollama_url = ""
        self.debug_mode = True
        self.bot_token = ""
        self.timeout = 90
        self.ChatML = False
        self.temperature = 1.0
        self.top_p = 0.95
        self.min_p = 0.05
        self.num_predict = -1
        self.stop = None
        self.use_translation = False

    def __str__(self):
        return (
            f"BotState(model={self.model}, url={self.ollama_url}, "
            f"max_tokens={self.max_tokens}, debug={self.debug_mode} ,"
            f"roles={len(self.user_roles)}, history={len(self.user_history)}, "
            f"bot_token={self.bot_token}, enc={self.enc}), "
            f"timeout={self.timeout}, ChatML={self.ChatML}"
        )
    
    # === –†–û–õ–ò ===
    def get_user_role(self, user_id):
        return self.user_roles.get(str(user_id))

    def set_user_role(self, user_id, role, scenario_file):
        self.user_roles[str(user_id)] = {
            "role": role,
            "scenario": scenario_file
        }

    def clear_user_role(self, user_id):
        if str(user_id) in self.user_roles:
            self.user_roles[str(user_id)]["role"] = None

    # === –ò–°–¢–û–†–ò–Ø ===
    def get_user_history(self, user_id, scenario_file):
        return self.user_history.setdefault(str(user_id), {}).setdefault(scenario_file, {
            "history": [],
            "last_input": "",
            "last_bot_id": None
        })

    def update_user_history(self, user_id, scenario_file, history, last_input="", last_bot_id=None):
        data = self.get_user_history(user_id, scenario_file)
        data["history"] = history
        if last_input:
            data["last_input"] = last_input
        if last_bot_id is not None:
            data["last_bot_id"] = last_bot_id
        self.user_history[str(user_id)][scenario_file] = data


    def cut_last_exchange(self, user_id, scenario_file):
        data = self.get_user_history(user_id, scenario_file)
        if len(data["history"]) >= 2:
            data["history"] = data["history"][:-2]
            return True
        return False

    # === WORLD_INFO ===
    def set_world_info(self, user_id, world_data):
        self.user_world_info[str(user_id)] = world_data

    def get_world_info(self, user_id):
        return self.user_world_info.get(str(user_id), {})
    
    # === –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–û–°–õ–ï–î–ù–ï–ô –ü–ê–†–´ ===
    def is_valid_last_exchange(self, user_id, scenario_file, char_name, world):
        data = self.get_user_history(user_id, scenario_file)
        history = data.get("history", [])
        if len(history) < 2:
            return False

        last_msg = history[-2]
        last_reply = history[-1]

        user_prefix = f"{world.get('user_emoji', 'üë§')}:"
        assistant_prefix = f"{char_name}:"

        return last_msg.startswith(user_prefix) and last_reply.startswith(assistant_prefix)


bot_state = BotState()



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def init_config():
    config = load_config()

    bot_state.config = config
    bot_state.max_tokens = config.get("max_tokens", 7000)
    bot_state.model = config.get("model", "saiga_nemo_12b.Q8_0:latest")
    bot_state.ollama_url = config.get("ollama_url", "http://localhost:11434/api/generate")
    bot_state.debug_mode = config.get("debug_mode", True)
    bot_state.bot_token = config.get("Telegram_bot_token", "")
    bot_state.timeout = config.get("ollama_timeout", 90)
    bot_state.ChatML = config.get("ChatML", False)
    bot_state.temperature = config.get("temperature", 1.0)
    bot_state.top_p = config.get("top_p", 0.95)
    bot_state.min_p = config.get("min_p", 0.05)
    bot_state.num_predict = config.get("num_predict", 200)
    bot_state.stop = config.get("stop", None)
    bot_state.use_translation = config.get("use_translation", False)

    try:
        bot_state.enc = tiktoken.get_encoding(config.get("tiktoken_encoding", "gpt2"))
    except Exception:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–Ω–∫–æ–¥–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—é gpt2 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        bot_state.enc = tiktoken.get_encoding("gpt2")





# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ config.json
def load_config():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            if data.get("debug_mode", True):
                print("üõ†Ô∏è [DEBUG] –ó–∞–≥—Ä—É–∂–µ–Ω config.json:")
                print(json.dumps(data, indent=2, ensure_ascii=False))
            return data
    raise FileNotFoundError("–§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")



# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
def load_characters(scenario_path: str):
    if os.path.exists(scenario_path):
        with open(scenario_path, "r", encoding="utf-8") as f:
            data = json.load(f)

            world = data.get("world", {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∏—Ä", "description": ""})
            characters = data.get("characters", {})

            if bot_state.debug_mode:
                print(f"üåç –ú–∏—Ä: {world['name']} ‚Äî {world['description']}")
                print("üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏:")
                for key, char in characters.items():
                    print(f"  üß¨ [{key}] {char['name']} {char.get('emoji', '')} ‚Äî {char['description']}")

            return characters, world

    raise FileNotFoundError(f"–§–∞–π–ª {scenario_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")




# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def load_roles():
    if os.path.exists(ROLES_FILE):
        with open(ROLES_FILE, "r", encoding="utf-8") as f:
            bot_state.user_roles = json.load(f)
    else:
        bot_state.user_roles = {}         



# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_roles():
    with open(ROLES_FILE, "w", encoding="utf-8") as f:
        json.dump(bot_state.user_roles, f, ensure_ascii=False, indent=2)



## –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def load_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            bot_state.user_history = json.load(f)
    else:
        bot_state.user_history = {}


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª
def save_history():
    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(bot_state.user_history, f, ensure_ascii=False, indent=2)



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª
def append_to_archive_user(
    user_id: str,
    role_name: str,
    speaker: str,
    text: str,
    username: str = "",
    full_name: str = "",
    scenario_file: str = "",
    world_name: str = ""
):

    if not os.path.exists(LOG_DIR):
        os.makedirs(LOG_DIR)

    date_str = datetime.now().strftime("%Y-%m-%d")
    file_path = os.path.join(LOG_DIR, f"{user_id}_{date_str}.jsonl")

    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "user_id": user_id,
        "username": username,
        "full_name": full_name,
        "character": role_name,
        "speaker": speaker,
        "text": text,
        "scenario": scenario_file,
        "world": world_name
    }

    with open(file_path, "a", encoding="utf-8") as f:
        f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown-—Ä–∞–∑–º–µ—Ç–∫–∏
def safe_markdown_v2(text: str) -> str:
    # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º **–∂–∏—Ä–Ω—ã–π** –∏ *–∫—É—Ä—Å–∏–≤* –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏
    text = re.sub(r'\*\*(.+?)\*\*', r'%%BOLD%%\1%%BOLD%%', text)
    text = re.sub(r'\*(.+?)\*', r'%%ITALIC%%\1%%ITALIC%%', text)

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é
    escaped_text = escape_markdown(text, version=2)

    # –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∂–∏—Ä–Ω—ã–π –∏ –∫—É—Ä—Å–∏–≤ (—É–∂–µ –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
    escaped_text = escaped_text.replace('%%BOLD%%', '*')
    escaped_text = escaped_text.replace('%%ITALIC%%', '_')

    return escaped_text



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –º–∏—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_character_and_world(user_id: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (char, world, characters, scenario_file) –∏–ª–∏ (None, None, None, None) + —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    role_entry = bot_state.get_user_role(user_id)

    if not role_entry or not isinstance(role_entry, dict):
        return None, None, None, None, "üòø –¢—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞–ø–∏—à–∏ /role."

    role_key = role_entry.get("role")
    scenario_file = role_entry.get("scenario")

    if not role_key or not scenario_file:
        return None, None, None, None, "üòø –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –∏–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏. –ù–∞–ø–∏—à–∏ /role."

    scenario_path = os.path.join(SCENARIOS_DIR, scenario_file)
    if not os.path.exists(scenario_path):
        return None, None, None, None, f"‚ùó –°—Ü–µ–Ω–∞—Ä–∏–π *{scenario_file}* –Ω–µ –Ω–∞–π–¥–µ–Ω."

    try:
        characters, world = load_characters(scenario_path)
    except Exception as e:
        return None, None, None, None, f"‚ùó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}"

    char = characters.get(role_key)
    if not char:
        return None, None, None, None, (
            f"‚ö†Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ *{role_key}* –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ *{world.get('name', scenario_file)}*.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–≥–æ: /role"
        )

    return char, world, characters, scenario_file, None




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# –º—ã –±—É–¥–µ–º –≤—ã–¥–µ–ª—è—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (system, narrator, scene –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ user/assistant)
def smart_trim_history(history, enc, max_tokens=6000):
    """
    –£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏:
    - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç system-–ø–æ–¥–æ–±–Ω—ã–µ –±–ª–æ–∫–∏ (Narrator, —Å—Ü–µ–Ω—ã)
    - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ n —Ä–µ–ø–ª–∏–∫ (user/assistant)
    - —É–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –≤ max_tokens (–≤–∫–ª—é—á–∞—è system prompt –∏ –¥—Ä—É–≥–∏–µ —á–∞—Å—Ç–∏)
    """
    # 1. –°–Ω–∞—á–∞–ª–∞ –≤—ã–¥–µ–ª–∏–º Narrator-—Å—Ü–µ–Ω—ã –∏ system-like —ç–ª–µ–º–µ–Ω—Ç—ã
    preserved = []
    dialogue = []

    for msg in history:
        if msg.startswith("Narrator:") or msg.startswith("<|im_start|>system") or msg.startswith("<|im_start|>scene"):
            preserved.append(msg)
        else:
            dialogue.append(msg)

    # 2. –ü–æ–¥—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤
    preserved_tokens = sum(len(enc.encode(m + "\n")) for m in preserved)
    remaining_tokens = max_tokens - preserved_tokens

    trimmed_dialogue = []
    dialogue_tokens = 0

    # 3. –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞, –ø–æ–∫–∞ —É–∫–ª–∞–¥—ã–≤–∞–µ–º—Å—è –≤ –ª–∏–º–∏—Ç
    for msg in reversed(dialogue):
        msg_tokens = len(enc.encode(msg + "\n"))
        if dialogue_tokens + msg_tokens <= remaining_tokens:
            trimmed_dialogue.insert(0, msg)
            dialogue_tokens += msg_tokens
        else:
            break

    result = preserved + trimmed_dialogue
    total_tokens = preserved_tokens + dialogue_tokens
    return result, total_tokens





# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    user_id = str(update.effective_user.id)

    char, _, _, _, error = get_user_character_and_world(user_id)
    if error:
        if "–Ω–µ –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞" in error or "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" in error:
            # üí¨ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞
            await update.message.reply_text(
                "–ü—Ä–∏–≤–µ—Ç–∏–∫! üêæ –Ø ‚Äî —Ä–æ–ª–µ–≤–æ–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –æ—Ç –∏–º–µ–Ω–∏ —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π: /scenario –∏ —Å –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å –æ–±—â–∞—Ç—å—Å—è: /role\n"
                "–ê –ø–æ—Ç–æ–º –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ ‚Äî –∏ –Ω–∞—á–Ω—ë–º –º–∞–≥–∏—á–µ—Å–∫–æ–µ –æ–±—â–µ–Ω–∏–µ! ‚ú®\n\n"
                "üí° –•–æ—á–µ—à—å —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å —Å –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–π —Å—Ü–µ–Ω—ã?\n"
                "–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /scene ‚Äî –∏ —è –æ–ø–∏—à—É, –∫–∞–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–≤–æ—ë –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ üé¨"
            )
        else:
            # ‚ö†Ô∏è –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            await update.message.reply_text(error, parse_mode="Markdown")
        return
        
    # üíï –í—Å—ë —Ö–æ—Ä–æ—à–æ ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ!
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: *{char['name']}* {char.get('emoji', '')}\n\n"
        f"–ú–æ–∂–µ—à—å —Å—Ä–∞–∑—É –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî –∏ —è –æ—Ç–≤–µ—á—É —Ç–µ–±–µ –∫–∞–∫ {char['name']}.\n"
        f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å ‚Äî –Ω–∞–ø–∏—à–∏ /role üòä",
        parse_mode="Markdown"
    )




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    role_entry = bot_state.get_user_role(user_id)

    roles_text = "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ /scenario."

    if role_entry and "scenario" in role_entry:
        scenario_file = role_entry["scenario"]
        scenario_path = os.path.join(SCENARIOS_DIR, scenario_file)
        try:
            characters, _ = load_characters(scenario_path)
            role_lines = [
                f"‚Ä¢ *{char['name']}* ‚Äî {char['description']} {char['emoji']}"
                for char in characters.values()
            ]
            roles_text = "\n".join(role_lines)
        except Exception as e:
            roles_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}"

    await update.message.reply_text(
        "üÜò *–ü–æ–º–æ—â—å*\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ /whoami ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å, –∫—Ç–æ —Ç—ã –≤ —ç—Ç–æ–º –º–∏—Ä–µ\n"
        "‚Ä¢ /history ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º –º–∏—Ä–µ\n"
        "‚Ä¢ /reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
        "‚Ä¢ /retry ‚Äî –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ /edit ‚Äî –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ /scenario ‚Äî –≤—ã–±—Ä–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏\n"
        "‚Ä¢ /role ‚Äî –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Ä–æ–ª–µ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ /scene ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—É—é —Å—Ü–µ–Ω—É ‚ú®\n\n"
        "üìå –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ —Ä–æ–ª—å, –∞ –∑–∞—Ç–µ–º –ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≤ –µ—ë —Å—Ç–∏–ª–µ!\n\n"
        "*üí° –ö–∞–∫ –ø–∏—Å–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è:*\n"
        "–¢—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è, –∏–ª–∏ –¥–∞—Ç—å —É–∫–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≥–æ–≤–æ—Ä–∏—Ç—å:\n\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π *–∑–≤—ë–∑–¥–æ—á–∫–∏*:\n"
        "`*—É–ª—ã–±–∞–µ—Ç—Å—è –∏ –º–∞—à–µ—Ç —Ä—É–∫–æ–π*`\n"
        "`*–æ–ø–∏—à–∏ –º–µ—Å—Ç–æ, –∫—É–¥–∞ –º—ã –ø—Ä–∏—à–ª–∏*`\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:*\n"
        f"{roles_text}",
        parse_mode="Markdown"
    )




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /role
async def set_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    role_entry = bot_state.get_user_role(user_id)

    if not role_entry or "scenario" not in role_entry:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ /scenario.")
        return

    scenario_file = role_entry["scenario"]
    scenario_path = os.path.join(SCENARIOS_DIR, scenario_file)

    try:
        characters, _ = load_characters(scenario_path)
    except Exception as e:
        await update.message.reply_text(f"‚ùó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        return

    keyboard = [
        [InlineKeyboardButton(characters[key]["name"], callback_data=key)]
        for key in characters
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=reply_markup)





# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /reset
async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    role_entry = bot_state.get_user_role(user_id)
    if not role_entry:
        await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ —Ä–æ–ª—å: /scenario ‚Üí /role")
        return

    scenario_file = role_entry.get("scenario")
    if not scenario_file:
        await update.message.reply_text("‚ùó –£ —Ç–µ–±—è –Ω–µ –≤—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π. –ù–∞–ø–∏—à–∏ /scenario.")
        return

    # –û–±–Ω—É–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    bot_state.user_history.setdefault(user_id, {})[scenario_file] = {
        "history": [],
        "last_input": "",
        "last_bot_id": None
    }

    await update.message.reply_text(
        "üîÅ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞! –¢—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∑–∞–Ω–æ–≤–æ —Å —Ç–µ–∫—É—â–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º ‚ú®\n\n"
    )

    # üé¨ –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å intro_scene ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    try:
        _, world = load_characters(os.path.join(SCENARIOS_DIR, scenario_file))
        intro_scene = world.get("intro_scene", "")
        if intro_scene:
            user_data = bot_state.get_user_history(user_id, scenario_file)
            narrator_entry = f"Narrator: {intro_scene}"
            user_data["history"].append(narrator_entry)
            bot_state.update_user_history(user_id, scenario_file, user_data["history"])
            save_history()
            formatted_intro = safe_markdown_v2(intro_scene)
            await update.message.reply_text(formatted_intro, parse_mode="MarkdownV2")
    except Exception as e:
        if bot_state.debug_mode:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å intro_scene –ø–æ—Å–ª–µ reset: {e}")

    save_history()

    await update.message.reply_text(
        "üí° –•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å —Å—é–∂–µ—Ç–Ω–æ–π —Å—Ü–µ–Ω—ã? –ü–æ–ø—Ä–æ–±—É–π /scene üé¨"
    )





# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /whoami
async def whoami_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    
    char, world, _, scenario_file, error = get_user_character_and_world(user_id)
    if error:
        await update.message.reply_text(error, parse_mode="Markdown")
        return

    user_role_desc = world.get("user_role", "")

    text = (
        f"üë§ *–¢–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫:* {char['name']} {char.get('emoji', '')}\n"
        f"üß¨ _{char['description']}_\n\n"
        f"üåç *–ú–∏—Ä:* {world.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} {world.get('emoji', '')}\n"
        f"üìù _{world.get('description', '')}_\n"
    )

    if user_role_desc:
        user_emoji = world.get("user_emoji", "üë§")
        text += f"\nüé≠ *–¢—ã –≤ —ç—Ç–æ–º –º–∏—Ä–µ:* {user_emoji} _{user_role_desc}_"

    text += f"\n\nüìÇ *–°—Ü–µ–Ω–∞—Ä–∏–π:* `{scenario_file}`"

    await update.message.reply_text(text, parse_mode="Markdown")




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /edit
async def edit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    
    char, world, _, scenario_file, error = get_user_character_and_world(user_id)
    if error:
        await update.message.reply_text(error, parse_mode="Markdown")
        return

    user_data = bot_state.get_user_history(user_id, scenario_file)

    if not user_data or "last_input" not in user_data:
        await update.message.reply_text("‚ùó –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    char_name = char["name"]

    if bot_state.is_valid_last_exchange(user_id, scenario_file, char_name, world):
        history_cut = user_data["history"][:-2]
        bot_state.update_user_history(user_id, scenario_file, history_cut, last_input=user_data["last_input"])
        save_history()
        if bot_state.debug_mode:
            print(f"‚úÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±—Ä–µ–∑–∞–Ω–∞ –Ω–∞ 2 —Å–æ–æ–±—â–µ–Ω–∏—è (edit)")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.")
        return

    await update.message.reply_text(
        f"üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Å–≤–æ—ë –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{user_data['last_input']}",
        reply_markup=ForceReply(selective=True)
    )






# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /retry
async def retry_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    char, world, _, scenario_file, error = get_user_character_and_world(user_id)
    if error:
        await update.message.reply_text(error, parse_mode="Markdown")
        return

    user_data = bot_state.get_user_history(user_id, scenario_file)

    if not user_data or "last_input" not in user_data:
        await update.message.reply_text("‚ùó –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞.")
        return

    char_name = char["name"]

    if bot_state.is_valid_last_exchange(user_id, scenario_file, char_name, world):
        history_cut = user_data["history"][:-2]
        bot_state.update_user_history(user_id, scenario_file, history_cut, last_input=user_data["last_input"])
        save_history()
        if bot_state.debug_mode:
            print(f"üîÅ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±—Ä–µ–∑–∞–Ω–∞ –Ω–∞ 2 —Å–æ–æ–±—â–µ–Ω–∏—è (retry)")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å: –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —à–∞–±–ª–æ–Ω—É.")
        return

    await update.message.reply_text("üîÅ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç...")
    await handle_message(update, context, override_input=user_data["last_input"])







# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /scenarios
async def scenario_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    files = [f for f in os.listdir(SCENARIOS_DIR) if f.endswith(".json")]
    buttons = []

    for f in sorted(files):
        path = os.path.join(SCENARIOS_DIR, f)
        try:
            with open(path, "r", encoding="utf-8") as file:
                data = json.load(file)
                world = data.get("world", {})
                world_name = world.get("name", f)
                emoji = world.get("emoji", "üåç")
                buttons.append([InlineKeyboardButton(f"{emoji} {world_name}", callback_data=f"scenario:{f}")])
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {f}: {e}")

    if not buttons:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ –ø–∞–ø–∫–µ /scenarios.")
        return

    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("üåê –í—ã–±–µ—Ä–∏ –º–∏—Ä:", reply_markup=reply_markup)




# –ö–æ–º–∞–Ω–¥–∞ /scene ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω—É –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∫ Narrator
async def scene_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –º–∏—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    char, world, _, scenario_file, error = get_user_character_and_world(user_id)
    if error:
        await update.message.reply_text(error, parse_mode="Markdown")
        return

    user_role = world.get("user_role", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")
    world_name = world.get("name", "–º–∏—Ä —Ñ–∞–Ω—Ç–∞–∑–∏–π")
    world_prompt = world.get("system_prompt", "")

    # –§–æ—Ä–º–∏—Ä—É–µ–º prompt –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç chatML-—Ä–µ–∂–∏–º–∞
    if bot_state.ChatML:
        prompt = (
            f"<|im_start|>system\n"
            f"{world_prompt.strip()}\n\n"
            f"–¢—ã –ø–∏—à–µ—à—å —Å—Ü–µ–Ω—É –≤ –∂–∞–Ω—Ä–µ —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä—ã.\n"
            f"–¢—ã –∏–≥—Ä–∞–µ—à—å –∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ‚Äî ({char.get('emoji', '')}) {char['name']}, {char['description']}, –∫–æ—Ç–æ—Ä—ã–π –æ—â—É—â–∞–µ—Ç —Å–µ–±—è —Ç–∞–∫: \"{char['prompt']}\".\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–≥—Ä–∞–µ—Ç —Ä–æ–ª—å –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è ‚Äî {user_role}.\n"
            f"–û–ø–∏—à–∏ –Ω–∞—Å—ã—â–µ–Ω–Ω—É—é, –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—É—é –∏ –∫–æ—Ä–æ—Ç–∫—É—é —Å—Ü–µ–Ω—É, –∫–∞–∫ –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –Ω–æ–≤–µ–ª–ª–µ –∏–ª–∏ –∞–Ω–∏–º–µ. "
            f"–î–µ–π—Å—Ç–≤–∏–µ, –¥–∏–∞–ª–æ–≥ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–∞–∂–Ω—ã.\n"
            f"–¢–µ–∫—Å—Ç ‚Äî –æ—Ç –ª–∏—Ü–∞ —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫–∞.\n"
            f"–ù–∞—á–Ω–∏ –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º ({char["name"]}) –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–≤ —Ä–æ–ª–∏: {user_role}).\n"
            f"–ü—É—Å—Ç—å –ø–µ—Ä–≤—ã–π –≥–æ–≤–æ—Ä–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ ({char['name']}).\n\n"
            f"<|im_end|>\n"
            f"<|im_start|>assistant\n"
        )
    else:
        prompt = (
            f"{world_prompt.strip()}\n\n"
            f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –Ω–∞—Å—ã—â–µ–Ω–Ω—É—é, –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—É—é —Å—Ü–µ–Ω—É –≤ –∂–∞–Ω—Ä–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –Ω–æ–≤–µ–ª–ª—ã.\n"
            f"–ú–∏—Ä: {world_name}\n"
            f"–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π ‚Äî ({char.get('emoji', '')}) {char['name']}, {char['description']}, –∫–æ—Ç–æ—Ä—ã–π –æ—â—É—â–∞–µ—Ç —Å–µ–±—è —Ç–∞–∫: \"{char['prompt']}\".\n"
            f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_role}\n"
            f"–û–ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏—è, –¥–∏–∞–ª–æ–≥–∏, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.\n\n"
            f"{char['name']}:"
        )

    payload = {
        "model": bot_state.model,
        "prompt": prompt,
        "stream": False,                            # –æ—Ç–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥, —Ö–æ—Ç–∏–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É
        "options": {
            "temperature": bot_state.temperature,
            "top_p": bot_state.top_p,
            "min_p": bot_state.min_p,
            "stop": bot_state.stop,
            "num_ctx": bot_state.max_tokens,         # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –æ–∫–Ω–æ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –º–æ–¥–µ–ª—å—é)
       },
    }


    # DEBUG
    if bot_state.debug_mode:
        print("\n" + "="*60)
        print("üé¨ PROMPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω—ã:")
        print(prompt)
        print("="*60)

    try:
        if bot_state.debug_mode:
            print("\n" + "="*60)
            print("üé¨ PROMPT, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤ –º–æ–¥–µ–ª—å (—Å—Ü–µ–Ω–∞):\n")
            print(payload["prompt"])
            print("="*60)
            print("üì¶ PAYLOAD (scene):")
            print(json.dumps(payload, indent=2, ensure_ascii=False))
            print("="*60)
        thinking_message = await update.message.reply_text("üé¨ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ü–µ–Ω—É... –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ ‚òï")
        
        # –ü–µ—Ä–µ–≤–æ–¥ prompt, –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω use_translation
        if bot_state.use_translation:
            translated_prompt = translate_prompt_to_english(prompt)
            if bot_state.debug_mode:
                print("üà∂ Translated PROMPT to ENGLISH (/scene):\n")
                print(translated_prompt)
                print("=" * 60)
            payload["prompt"] = translated_prompt
        
        response = requests.post(bot_state.ollama_url, json=payload, timeout=bot_state.timeout)

        data = response.json()
        scene = data["response"].strip()

        # –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω use_translation
        if bot_state.use_translation:
            scene = translate_prompt_to_russian(scene)
            if bot_state.debug_mode:
                print("üà∂ Translated SCENE to RUSSIAN:\n")
                print(scene)
                print("=" * 60)

        if bot_state.debug_mode:
            print("üìú –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ü–µ–Ω–∞:\n")
            print(scene)
            print("="*60)
        await thinking_message.delete()

    except Exception as e:
        scene = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω—ã: {e}"

    # üíæ –î–æ–±–∞–≤–ª—è–µ–º —Å—Ü–µ–Ω—É –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∫ Narrator
    user_data = bot_state.get_user_history(user_id, scenario_file)
    narrator_entry = f"Narrator: {scene}"
    user_data["history"].append(narrator_entry)
    bot_state.update_user_history(user_id, scenario_file, user_data["history"])
    save_history()

    # üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    formatted_scene = safe_markdown_v2(scene)
    await update.message.reply_text(formatted_scene, parse_mode="MarkdownV2")





# –ö–æ–º–∞–Ω–¥–∞ /history ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–∏—Ä–∞
async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    role_entry = bot_state.get_user_role(user_id)
    if not role_entry or not role_entry.get("scenario"):
        await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –ø–æ–º–æ—â—å—é /scenario.")
        return

    scenario_file = role_entry["scenario"]
    user_data = bot_state.get_user_history(user_id, scenario_file)
    history = user_data.get("history", [])

    if not history:
        await update.message.reply_text("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å!")
        return

    # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã Telegram –Ω–µ —Ä—É–≥–∞–ª—Å—è
    MAX_LENGTH = 4096
    chunks = []
    current = ""
    for line in history:
        if len(current) + len(line) + 1 > MAX_LENGTH:
            chunks.append(current)
            current = ""
        current += line + "\n"
    if current:
        chunks.append(current)

    for chunk in chunks:
        await update.message.reply_text(f"üìù –ò—Å—Ç–æ—Ä–∏—è:\n\n{chunk}", parse_mode="Markdown")





# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
async def role_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query: CallbackQuery = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    role_key = query.data

    role_entry = bot_state.get_user_role(user_id)
    if not role_entry or "scenario" not in role_entry:
        await query.edit_message_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ /scenario.")
        return

    scenario_file = role_entry["scenario"]
    scenario_path = os.path.join(SCENARIOS_DIR, scenario_file)

    try:
        characters, world = load_characters(scenario_path)
    except Exception as e:
        await query.edit_message_text(f"‚ùó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        return

    if role_key not in characters:
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏.")
        return

    bot_state.set_user_role(user_id, role_key, scenario_file)
    save_roles()

    char = characters[role_key]
    await query.edit_message_text(
        f"–¢–µ–ø–µ—Ä—å —Ç—ã –æ–±—â–∞–µ—à—å—Å—è —Å {char['name']} {char.get('emoji', '')}.\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî –∏ —è –æ—Ç–≤–µ—á—É —Ç–µ–±–µ! üé≠"
    )




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
async def handle_force_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message and "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Å–≤–æ—ë –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" in update.message.reply_to_message.text:
        # –ø–æ–¥–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–æ–≤—ã–π –∏ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        update.message.text = update.message.text
        await handle_message(update, context)





# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
async def scenario_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query: CallbackQuery = update.callback_query
    await query.answer()

    selected_file = query.data.split(":", 1)[1].strip()
    scenario_path = os.path.join(SCENARIOS_DIR, selected_file)
    user_id = str(query.from_user.id)

    try:
        characters, world = load_characters(scenario_path)
        bot_state.set_world_info(user_id, world)

        # üßπ –°–æ–∑–¥–∞—ë–º –∏—Å—Ç–æ—Ä–∏—é, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
        user_histories = bot_state.user_history.setdefault(user_id, {})
        if selected_file not in user_histories:
            user_histories[selected_file] = {
                "history": [],
                "last_input": "",
                "last_bot_id": None
            }

        # ‚ùå –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è
        bot_state.clear_user_role(user_id)
        bot_state.set_user_role(user_id, None, selected_file)

        save_roles()
        save_history()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ config.json
        bot_state.config["scenario_file"] = selected_file  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
        with open(CONFIG_FILE, "w", encoding="utf-8") as f:
            json.dump(bot_state.config, f, ensure_ascii=False, indent=2)

        # –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
        role_lines = [
            f"‚Ä¢ *{char['name']}* ‚Äî {char['description']} {char['emoji']}"
            for key, char in characters.items()
        ]
        roles_text = "\n".join(role_lines)

        user_role = world.get("user_role", "")
        user_emoji = world.get("user_emoji", "üë§")
        user_role_line = f"\nüé≠ *–¢—ã –≤ —ç—Ç–æ–º –º–∏—Ä–µ:* {user_emoji} _{user_role}_" if user_role else ""

        # ‚è≥ –ï—Å–ª–∏ –µ—Å—Ç—å intro_scene –∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç—Ä–æ
        intro_scene = world.get("intro_scene", "")
        user_data = bot_state.get_user_history(user_id, selected_file)
        if intro_scene and not user_data["history"]:
            narrator_entry = f"Narrator: {intro_scene}"
            user_data["history"].append(narrator_entry)
            bot_state.update_user_history(user_id, selected_file, user_data["history"])
            save_history()
            formatted_intro = safe_markdown_v2(intro_scene)
            await query.message.reply_text(formatted_intro, parse_mode="MarkdownV2")

        await query.edit_message_text(
            f"üéÆ –°—Ü–µ–Ω–∞—Ä–∏–π *{world.get('name', selected_file)}* –∑–∞–≥—Ä—É–∂–µ–Ω! {world.get('emoji', '')}\n"
            f"üìù _{world.get('description', '')}_\n"
            f"{user_role_line}\n\n"
            f"*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:*\n{roles_text}\n\n"
            f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–∏—Ä–∞: /role\n"
            f"üí° –ú–æ–∂–µ—à—å –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏—Ç—å —Å—é–∂–µ—Ç–Ω—É—é —Å—Ü–µ–Ω—É: /scene üé¨",
            parse_mode="Markdown"
        )

    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")





# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ ChatML-–ø—Ä–æ–º–ø—Ç–∞
def build_chatml_prompt(system_prompt: str, history: List[str], user_emoji: str, current_char_name: str) -> str:
    """–°–±–æ—Ä–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ChatML."""
    blocks = [f"<|im_start|>system\n{system_prompt}<|im_end|>"]

    for msg in history:
        if msg.startswith(f"{user_emoji}:"):
            text = msg[len(user_emoji)+1:].strip()
            blocks.append(f"<|im_start|>user\n{text}<|im_end|>")
        elif msg.startswith("Narrator:"):
            text = msg[len("Narrator:"):].strip()
            blocks.append(f"<|im_start|>system\n{text}<|im_end|>")
        else:
            colon_index = msg.find(":")
            if colon_index != -1:
                speaker = msg[:colon_index].strip()
                text = msg[colon_index + 1:].strip()

                if speaker == current_char_name:
                    blocks.append(f"<|im_start|>assistant\n{text}<|im_end|>")
                else:
                    blocks.append(f"<|im_start|>{speaker}\n{text}<|im_end|>")

    blocks.append("<|im_start|>assistant\n")
    return "\n".join(blocks)



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
def build_plain_prompt(base_prompt: str, history: List[str], current_char_name: str) -> str:
    """–°–±–æ—Ä–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞."""
    formatted_history = []
    for msg in history:
        formatted_history.append(msg)
    return f"{base_prompt}\n" + "\n".join(formatted_history) + f"\n{current_char_name}:"







# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE, override_input=None):
    user_input = override_input or update.message.text

    user_obj = update.effective_user
    user_id = str(user_obj.id)
    username = user_obj.username or ""
    full_name = user_obj.full_name or ""

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –º–∏—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    char, world, characters, scenario_file, error = get_user_character_and_world(user_id)
    if error:
        await update.message.reply_text(error, parse_mode="Markdown")
        return

    role_entry = bot_state.get_user_role(user_id)
    default_role = next(iter(characters))
    role_key = role_entry.get("role") if role_entry else default_role

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞—Ä—Ö–∏–≤
    append_to_archive_user(
        user_id,
        role_key,
        "user",
        user_input,
        username,
        full_name,
        scenario_file=scenario_file,
        world_name=world.get("name", "")
    )

    # ========== –¢–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è ==========
    user_role_description = world.get("user_role", "")
    world_prompt = world.get("system_prompt", "")
    base_prompt = f"{world_prompt}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî {user_role_description}.\n{char['prompt']}\n"
    tokens_used = len(bot_state.enc.encode(base_prompt))

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    user_data = bot_state.get_user_history(user_id, scenario_file)

    history = user_data["history"]
    trimmed_history, tokens_used = smart_trim_history(history, bot_state.enc, bot_state.max_tokens - tokens_used)


    user_emoji = world.get("user_emoji", "üßë")
    user_message = f"{user_emoji}: {user_input}"


    user_message_tokens = len(bot_state.enc.encode(user_message + "\n"))
    # –î–æ–±–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –≤–ª–µ–∑–∞–µ—Ç
    if tokens_used + user_message_tokens <= bot_state.max_tokens:
        trimmed_history.append(user_message)
        tokens_used += user_message_tokens
    else:
        # –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã —É–º–µ—Å—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        while trimmed_history and tokens_used + user_message_tokens > bot_state.max_tokens:
            removed = trimmed_history.pop(0)
            tokens_used -= len(bot_state.enc.encode(removed + "\n"))

        trimmed_history.append(user_message)
        tokens_used += user_message_tokens
    
    total_prompt_tokens = tokens_used

    bot_state.update_user_history(user_id, scenario_file, trimmed_history, last_input=user_input)
    save_history()

    if bot_state.ChatML:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ChatML-–ø—Ä–æ–º–ø—Ç
        system_text = (
            f"{world_prompt.strip()}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî {user_role_description.strip()}.\n"
            f"{char['prompt'].strip()}\n"
            f"–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç *–≤ –∑–≤—ë–∑–¥–æ—á–∫–∞—Ö* ‚Äî —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.\n"
            f"–†–µ–∞–≥–∏—Ä—É–π –Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—è –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç.\n"
            f"–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É. –ü–∏—à–∏ –∫–∞–∫ –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –Ω–æ–≤–µ–ª–ª–µ: –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–ø–ª–∏–∫–∏, –º–µ–Ω—å—à–µ –æ–ø–∏—Å–∞–Ω–∏–π."
        )
        prompt = build_chatml_prompt(system_text, trimmed_history, user_emoji, char["name"])

    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        history_text = "\n".join(trimmed_history)
        prompt = build_plain_prompt(base_prompt, history_text, char['name'])

    payload = {
        "model": bot_state.model,
        "prompt": prompt,
        "stream": False,                            # –æ—Ç–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥, —Ö–æ—Ç–∏–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É
        "options": {
            "temperature": bot_state.temperature,
            "top_p": bot_state.top_p,
            "min_p": bot_state.min_p,
            "stop": bot_state.stop,
            "num_ctx": bot_state.max_tokens,         # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –æ–∫–Ω–æ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –º–æ–¥–µ–ª—å—é)
            "num_predict": bot_state.num_predict,       # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç ~50 —Ç–æ–∫–µ–Ω–∞–º–∏ (–∞–Ω–∞–ª–æ–≥ max_tokens=50)
        },
    }

    if bot_state.debug_mode:
        print("\n" + "="*60)
        print("üü¢ PROMPT, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤ –º–æ–¥–µ–ª—å (—Ç–µ–∫—Å—Ç):\n")
        print(prompt)
        print("="*60)
        print("üì¶ PAYLOAD:")
        print(json.dumps(payload, indent=2, ensure_ascii=False))
        print("="*60)

    thinking_message = None

    try:
        thinking_message = await update.message.reply_text(f"{char['name']} –¥—É–º–∞–µ—Ç... ü§î")
        
        # üåç –ü–µ—Ä–µ–≤–æ–¥ prompt –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ñ–ª–∞–≥ use_translation
        if bot_state.use_translation:
            translated_prompt = translate_prompt_to_english(prompt)
            if bot_state.debug_mode:
                print("üà∂ Translated PROMPT to ENGLISH:\n")
                print(translated_prompt)
                print("=" * 60)
            payload["prompt"] = translated_prompt
        
        response = requests.post(bot_state.ollama_url, json=payload, timeout=bot_state.timeout)
        data = response.json()
        reply = data["response"]

        if bot_state.debug_mode:
            print("üì§ –û—Ç–≤–µ—Ç:")
            print(reply)
            print("="*60)

        # üåç –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        if bot_state.use_translation:
            reply = translate_prompt_to_russian(reply)
            if bot_state.debug_mode:
                print("üà∂ Translated RESPONSE to RUSSIAN:\n")
                print(reply)
                print("=" * 60)
                print(f"üìä [Debug] –¢–æ–∫–µ–Ω–æ–≤ –≤ prompt: {total_prompt_tokens} / {bot_state.max_tokens}")
                
        trimmed_history.append(f"{char['name']}: {reply}")
        save_history()

        append_to_archive_user(
            user_id,
            role_key,
            "assistant",
            reply,
            username,
            full_name,
            scenario_file=scenario_file,
            world_name=world.get("name", "")
        )

    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏: {e}"

    finally:
        if thinking_message:
            try:
                await thinking_message.delete()
            except Exception as e:
                if bot_state.debug_mode:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")



    formatted_reply = safe_markdown_v2(reply)
    bot_msg = await update.message.reply_text(formatted_reply, parse_mode="MarkdownV2")
    bot_state.update_user_history(user_id, scenario_file, trimmed_history, last_bot_id=bot_msg.message_id)






# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():

    init_config()

    if not bot_state.bot_token:
        raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ config.json!")

    load_roles()
    load_history()

    app = ApplicationBuilder().token(bot_state.bot_token).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("role", set_role))
    app.add_handler(CommandHandler("reset", reset_command))
    app.add_handler(CommandHandler("retry", retry_command))
    app.add_handler(CommandHandler("edit", edit_command))
    app.add_handler(CommandHandler("scenario", scenario_command))
    app.add_handler(CommandHandler("scene", scene_command))
    app.add_handler(CommandHandler("whoami", whoami_command))
    app.add_handler(CommandHandler("history", history_command))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.REPLY & filters.TEXT, handle_force_reply))
    app.add_handler(CallbackQueryHandler(scenario_button, pattern="^scenario:"))
    app.add_handler(CallbackQueryHandler(role_button))

    await app.bot.set_my_commands([
        BotCommand("scenario", "–í—ã–±—Ä–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π"),
        BotCommand("role", "–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"),
        BotCommand("scene", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—é–∂–µ—Ç–Ω—É—é —Å—Ü–µ–Ω—É"),
        BotCommand("whoami", "–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ç–æ —è"),
        BotCommand("history", "–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é"),
        BotCommand("start", "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥"),
        BotCommand("help", "–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand("retry", "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        BotCommand("edit", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        BotCommand("reset", "–°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
    ])

    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    if bot_state.debug_mode:
        print(bot_state)

    try:
        await app.run_polling()
    finally:
        print("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –∏—Å—Ç–æ—Ä–∏—é –∏ —Ä–æ–ª–∏ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º...")
        save_history()
        save_roles()
        print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∏ —Ä–æ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        print("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
   



if __name__ == "__main__":
    import nest_asyncio
    import asyncio

    nest_asyncio.apply()
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é (Ctrl+C)")


