# === üß† –ú–æ–¥—É–ª—å —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ ===
# üìÅ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ —Å—Ç–∏–ª–µ SillyTavern

import os
import json

# –°—Ü–µ–Ω–∞—Ä–∏–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç—É—Ç
SCENARIO_DIR = "scenarios"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {"–∏–º—è_—Å—Ü–µ–Ω–∞—Ä–∏—è": {...}}
available_scenarios = {}

# –ü—Ä–∏–≤—è–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user_id: scenario_name}
user_scenarios = {}

# –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —è–≤–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ–≥–æ –∏–∑ –∞–∫—Ç—ë—Ä–æ–≤)
user_roles = {}


def load_scenarios():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ JSON-—Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏–∑ –ø–∞–ø–∫–∏ SCENARIO_DIR"""
    global available_scenarios
    if not os.path.exists(SCENARIO_DIR):
        os.makedirs(SCENARIO_DIR)
        return

    for filename in os.listdir(SCENARIO_DIR):
        if filename.endswith(".json"):
            path = os.path.join(SCENARIO_DIR, filename)
            try:
                with open(path, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    if "name" in data:
                        available_scenarios[data["name"]] = data
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è {filename}: {e}")


def get_user_scenario(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    scenario_name = user_scenarios.get(str(user_id))
    return available_scenarios.get(scenario_name)


def set_user_scenario(user_id, scenario_name):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if scenario_name in available_scenarios:
        user_scenarios[str(user_id)] = scenario_name
        return True
    return False


def build_scenario_prompt(scenario, history_text):
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π prompt –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –∏—Å—Ç–æ—Ä–∏–∏"""
    actors = scenario.get("actors", [])
    meta = scenario.get("meta_prompt", "")
    actor_descriptions = "\n".join(f"{a['name']}: {a['persona']}" for a in actors)
    return f"{meta}\n\n{actor_descriptions}\n\n–ò—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è:\n{history_text}\n–û—Ç–≤–µ—Ç:"  # <-- –∫–∞–∫ –≤ SillyTavern


# === –ö–æ–º–∞–Ω–¥–∞ /scenario ===
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes


async def scenario_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    for name, data in available_scenarios.items():
        keyboard.append([InlineKeyboardButton(name, callback_data=f"select_scn:{name}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π:", reply_markup=reply_markup)


async def scenario_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("select_scn:"):
        scenario_name = query.data.split(":", 1)[1]
        success = set_user_scenario(query.from_user.id, scenario_name)
        if success:
            scenario = available_scenarios[scenario_name]
            actor_buttons = [
                [InlineKeyboardButton(actor["name"], callback_data=f"role_actor:{actor['name']}")]
                for actor in scenario.get("actors", [])
            ]
            reply_markup = InlineKeyboardMarkup(actor_buttons)
            await query.edit_message_text(
                text=f"üé≠ –°—Ü–µ–Ω–∞—Ä–∏–π *{scenario_name}* –≤—ã–±—Ä–∞–Ω!\n\n–í—ã–±–µ—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
                parse_mode="Markdown",
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ü–µ–Ω–∞—Ä–∏—è.")


# === –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è ===
async def role_actor_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    role_name = query.data.split(":", 1)[1]

    scenario = get_user_scenario(user_id)
    if scenario:
        actor_names = [a["name"] for a in scenario.get("actors", [])]
        if role_name in actor_names:
            user_roles[user_id] = role_name
            await query.edit_message_text(f"–¢–µ–ø–µ—Ä—å —Ç—ã –æ–±—â–∞–µ—à—å—Å—è —Å *{role_name}* üé≠", parse_mode="Markdown")
            return

    await query.edit_message_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")



def build_actor_prompt(scenario, actor_name, history_text):
    actors = scenario.get("actors", [])
    meta = scenario.get("meta_prompt", "")
    actor = next((a for a in actors if a["name"] == actor_name), None)
    if not actor:
        return None

    return f"{meta}\n\n{actor['name']}: {actor['persona']}\n\n–ò—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è:\n{history_text}\n{actor['name']}:"
