# ollama_client.py
# This file is part of the BotAnya Telegram Bot project.

import json
import requests

def send_prompt_to_ollama(user_id: str, prompt: str, bot_state, use_translation: bool = False,
                           translate_func=None, reverse_translate_func=None) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç prompt –Ω–∞ —Å–µ—Ä–≤–µ—Ä Ollama –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.

    :param prompt: –ò—Å—Ö–æ–¥–Ω—ã–π prompt –¥–ª—è –º–æ–¥–µ–ª–∏.
    :param bot_state: –û–±—ä–µ–∫—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–≤–æ–π—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ –ø—Ä.
    :param use_translation: –§–ª–∞–≥, –µ—Å–ª–∏ True, –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–µ—Ä–µ–≤–æ–¥ prompt –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ.
    :param translate_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ prompt –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.
    :param reverse_translate_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞.
    :return: –°—Ç—Ä–æ–∫–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç –º–æ–¥–µ–ª–∏.
    """
    
    # Getting user service configuration
    service_config = bot_state.get_user_service_config(user_id)
    if not service_config or service_config.get("type") != "ollama":
        if bot_state.debug_mode:
            print("‚ö†Ô∏è Ollama –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return ""    


    api_url = service_config.get("url", "http://localhost:11434/api/generate")
    
    # Translate prompt if use_translation is True
    if use_translation and translate_func:
        prompt = translate_func(prompt)
    
    payload = {
        "model": service_config.get("model"),
        "prompt": prompt,
        "stream": False,
        "options": {
            "temperature": service_config.get("temperature", 1.0),
            "top_p": service_config.get("top_p", 0.95),
            "min_p": service_config.get("min_p", 0.05),
            "repeat_penalty": service_config.get("repeat_penalty", 1.0),
            "frequency_penalty": service_config.get("frequency_penalty", 0.0),
            "presence_penalty": service_config.get("presence_penalty", 0.0),
            "stop": service_config.get("stop", None),
            "num_ctx": service_config.get("max_tokens", 7000),
            "num_predict": service_config.get("num_predict", 2048),
        }
    }

    if bot_state.debug_mode:
        print("\n" + "="*60)
        print("üì¶ PAYLOAD –¥–ª—è Ollama:")
        print(json.dumps(payload, indent=2, ensure_ascii=False))
        print("="*60)

    try:
        response = requests.post(api_url, json=payload, timeout=service_config.get("timeout", 90))
        response.raise_for_status()
        data = response.json()
        result = data.get("response", "").strip()

        if bot_state.debug_mode:
            print("üìú –û—Ç–≤–µ—Ç Ollama:\n" + result)
            print("="*60)

        if use_translation and reverse_translate_func:
            result = reverse_translate_func(result)
            if bot_state.debug_mode:
                print("üàØ –ü–µ—Ä–µ–≤–æ–¥:\n" + result)
                print("="*60)

        return result

    except Exception as e:
        if bot_state.debug_mode:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Ollama: {e}")
        return ""
