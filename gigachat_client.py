# gigachat_client.py
# This file is part of the BotAnya Telegram Bot project.

import json
import uuid
import requests

def send_prompt_to_gigachat(user_id: str, prompt: str, bot_state, use_translation: bool = False,
                           translate_func=None, reverse_translate_func=None) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç prompt –∫ API GigaChat –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏.

    :param prompt: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π prompt –¥–ª—è –º–æ–¥–µ–ª–∏.
    :param bot_state: –û–±—ä–µ–∫—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, top_p, 
                      URL API GigaChat, –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (timeout), —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (debug_mode), 
                      –∞ —Ç–∞–∫–∂–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Ç–æ–∫–µ–Ω).
    :param use_translation: –§–ª–∞–≥, –µ—Å–ª–∏ True, –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–µ—Ä–µ–≤–æ–¥ prompt –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ.
    :param translate_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ prompt –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.
    :param reverse_translate_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞.
    :return: –°—Ç—Ä–æ–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –æ—Ç–≤–µ—Ç–æ–º –æ—Ç –º–æ–¥–µ–ª–∏ GigaChat.
    """
    
    # Getting user service configuration
    service_config = bot_state.get_user_service_config(user_id)
    if not service_config or service_config.get("type") != "gigachat":
        if bot_state.debug_mode:
            print("‚ö†Ô∏è GigaChat –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.")
        return ""

    # Getting user service key and auth key
    service_key = bot_state.get_user_role(user_id).get("service", bot_state.config.get("default_service"))
    auth_key = bot_state.credentials.get("services", {}).get(service_key, {}).get("auth_key")

    if not auth_key:
        if bot_state.debug_mode:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω auth_key –¥–ª—è GigaChat.")
        return ""

    # # Token for GigaChat API authorization
    access_token = None
    try:
        oauth_headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'application/json',
            'RqUID': str(uuid.uuid4()),
            'Authorization': 'Basic ' + auth_key
        }
        oauth_data = {'scope': service_config.get("scope", "GIGACHAT_API_PERS")}
        oauth_url = service_config.get("auth_url", "https://ngw.devices.sberbank.ru:9443/api/v2/oauth")

        response = requests.post(oauth_url, headers=oauth_headers, data=oauth_data, timeout=service_config.get("timeout", 100))
        response.raise_for_status()
        access_token = response.json().get("access_token")

    except Exception as e:
        if bot_state.debug_mode:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ GigaChat: {e}")
        return ""

    if not access_token:
        if bot_state.debug_mode:
            print("‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è GigaChat.")
        return ""

    # Translate prompt if use_translation is True
    if use_translation and translate_func:
        prompt = translate_func(prompt)

    payload = {
        "model": service_config.get("model"),
        "messages": [{"role": "user", "content": prompt}],
        "stream": False,
        "temperature": service_config.get("temperature", 1.0),
        "top_p": service_config.get("top_p", 0.95),
        "max_tokens": service_config.get("num_predict", 2048),
        "repeat_penalty": service_config.get("repeat_penalty", 1.0),
        "frequency_penalty": service_config.get("frequency_penalty", 0.0),
        "presence_penalty": service_config.get("presence_penalty", 0.0)
    }
  
    if bot_state.debug_mode:
        print("\n" + "="*60)
        print("üì¶ PAYLOAD –¥–ª—è GigaChat:")
        print(json.dumps(payload, indent=2, ensure_ascii=False))
        print("="*60)
    
    # Headers for GigaChat API request
    headers = {
        'Authorization': 'Bearer ' + access_token,
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'X-Request-ID': str(uuid.uuid4())
    }

    api_url = service_config.get("url", "https://gigachat.devices.sberbank.ru/api/v1/chat/completions")

    try:
        response = requests.post(api_url, headers=headers, json=payload, timeout=service_config.get("timeout", 100))
        response.raise_for_status()
        data = response.json()
        
        # Check if the response contains a finish_reason
        finish_reason = data.get("choices", [{}])[0].get("finish_reason", None)
        if finish_reason and bot_state.debug_mode:
            print(f"‚ö†Ô∏è Sber Gigachat –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–ø—Ä–æ—Å –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {finish_reason}\n")
    
        result = data["choices"][0]["message"]["content"].strip()

        if bot_state.debug_mode:
            print("üìú –û—Ç–≤–µ—Ç GigaChat:\n" + result)
            print("=" * 60)

        # Translate response if use_translation is True
        if use_translation and reverse_translate_func:
            result = reverse_translate_func(result)
            if bot_state.debug_mode:
                print("üàØ –ü–µ—Ä–µ–≤–æ–¥:")
                print(result)
                print("=" * 60)

        return result

    except Exception as e:
        if bot_state.debug_mode:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ GigaChat: {e}")
        return ""

